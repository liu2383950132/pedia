(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-56c62919"],{"6f56":function(e,t,a){},"893c":function(e,t,a){"use strict";a.r(t);var r=function(){var e=this,t=e.$createElement;e._self._c;return e._m(0)},c=[function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("div",{staticClass:"syntax"},[a("h1",[e._v("# declaration 声明")]),a("h2",[e._v("属性与值的键值对(大小写不敏感)")]),a("textarea",{attrs:{name:"",id:"",cols:"30",rows:"10"}},[e._v(" 冒号 U+003A 隔开 两边空白不必需 CSS 属性有 100 多个 值几乎有无限多个 并非所有的属性与值的配对都是被允许的 每个属性都定义了它的合法值 如果值对给定的属性而言非法时 声明就会被视为无效的 整个声明就会被CSS引擎忽略 ")]),a("hr"),a("h1",[e._v("# declaration block 声明块")]),a("textarea",{attrs:{name:"",id:"",cols:"30",rows:"10"}},[e._v(" 左大括号U+007B开始 右大括号U+007D结束 分号 U+003B 隔开声明 声明之间的空格会被忽略 声明块里最后一个声明可不用分号 ")]),a("hr"),a("h1",[e._v("# ruleset 规则集(简称规则)")]),a("h2",[e._v("group of selectors + declaration block")]),a("textarea",{attrs:{name:"",id:"",cols:"30",rows:"10"}},[e._v(" 一个元素可能被多个选择器选中 因此会有多个规则 有可能以不同的值去设置同一属性 层叠（cascade) 算法会规定哪个优先级最高并生效 用一组选择器来定义的单个规则集 比用多个单一选择器来定义的多个规则集更加简洁 却会导致一个重要的后果： 如果其中的一个*选择器无效* 如使用了一个未知的伪元素或伪类 会导致整个选择器都会无效 同时对应的规则都会被忽略 h1, h2:hoverer // :hoverer伪类不存在，h1的color也失效 color:#008c8c ")]),a("hr"),a("h1",[e._v("statement 语句")])])}],n={name:"Syntax"},o=n,s=(a("a353"),a("2877")),l=Object(s["a"])(o,r,c,!1,null,"6a9e2bd5",null);t["default"]=l.exports},a353:function(e,t,a){"use strict";var r=a("6f56"),c=a.n(r);c.a}}]);
//# sourceMappingURL=chunk-56c62919.9e2c3be5.js.map