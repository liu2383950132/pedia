(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-2d0ab8b4"],{1670:function(r,n,t){"use strict";t.r(n);var e=function(){var r=this,n=r.$createElement;r._self._c;return r._m(0)},a=[function(){var r=this,n=r.$createElement,t=r._self._c||n;return t("div",{staticClass:"04-Number"},[t("pre",[r._v("\r\n  数值的扩展\r\n  二进制和八进制表示法\r\n  Number.isFinite(), Number.isNaN()\r\n  Number.parseInt(), Number.parseFloat()\r\n  Number.isInteger()\r\n  Number.EPSILON\r\n  安全整数和 Number.isSafeInteger()\r\n  Math 对象的扩展\r\n  指数运算符\r\n  BigInt 数据类型\r\n  【免费课程】开始学习《ES6 实战教程》，一线大厂前端必备技能。\r\n  二进制和八进制表示法\r\n  ES6 提供了二进制和八进制数值的新的写法，分别用前缀0b（或0B）和0o（或0O）表示。\r\n\r\n  0b111110111 === 503 // true\r\n  0o767 === 503 // true\r\n  从 ES5 开始，在严格模式之中，八进制就不再允许使用前缀0表示，ES6 进一步明确，要使用前缀0o表示。\r\n\r\n  // 非严格模式\r\n  (function(){\r\n    console.log(0o11 === 011);\r\n  })() // true\r\n\r\n  // 严格模式\r\n  (function(){\r\n    'use strict';\r\n    console.log(0o11 === 011);\r\n  })() // Uncaught SyntaxError: Octal literals are not allowed in strict mode.\r\n  如果要将0b和0o前缀的字符串数值转为十进制，要使用Number方法。\r\n\r\n  Number('0b111')  // 7\r\n  Number('0o10')  // 8\r\n  Number.isFinite(), Number.isNaN()\r\n  ES6 在Number对象上，新提供了Number.isFinite()和Number.isNaN()两个方法。\r\n\r\n  Number.isFinite()用来检查一个数值是否为有限的（finite），即不是Infinity。\r\n\r\n  Number.isFinite(15); // true\r\n  Number.isFinite(0.8); // true\r\n  Number.isFinite(NaN); // false\r\n  Number.isFinite(Infinity); // false\r\n  Number.isFinite(-Infinity); // false\r\n  Number.isFinite('foo'); // false\r\n  Number.isFinite('15'); // false\r\n  Number.isFinite(true); // false\r\n  注意，如果参数类型不是数值，Number.isFinite一律返回false。\r\n\r\n  Number.isNaN()用来检查一个值是否为NaN。\r\n\r\n  Number.isNaN(NaN) // true\r\n  Number.isNaN(15) // false\r\n  Number.isNaN('15') // false\r\n  Number.isNaN(true) // false\r\n  Number.isNaN(9/NaN) // true\r\n  Number.isNaN('true' / 0) // true\r\n  Number.isNaN('true' / 'true') // true\r\n  如果参数类型不是NaN，Number.isNaN一律返回false。\r\n\r\n  它们与传统的全局方法isFinite()和isNaN()的区别在于，传统方法先调用Number()将非数值的值转为数值，再进行判断，而这两个新方法只对数值有效，Number.isFinite()对于非数值一律返回false, Number.isNaN()只有对于NaN才返回true，非NaN一律返回false。\r\n\r\n  isFinite(25) // true\r\n  isFinite(\"25\") // true\r\n  Number.isFinite(25) // true\r\n  Number.isFinite(\"25\") // false\r\n\r\n  isNaN(NaN) // true\r\n  isNaN(\"NaN\") // true\r\n  Number.isNaN(NaN) // true\r\n  Number.isNaN(\"NaN\") // false\r\n  Number.isNaN(1) // false\r\n  Number.parseInt(), Number.parseFloat()\r\n  ES6 将全局方法parseInt()和parseFloat()，移植到Number对象上面，行为完全保持不变。\r\n\r\n  // ES5的写法\r\n  parseInt('12.34') // 12\r\n  parseFloat('123.45#') // 123.45\r\n\r\n  // ES6的写法\r\n  Number.parseInt('12.34') // 12\r\n  Number.parseFloat('123.45#') // 123.45\r\n  这样做的目的，是逐步减少全局性方法，使得语言逐步模块化。\r\n\r\n  Number.parseInt === parseInt // true\r\n  Number.parseFloat === parseFloat // true\r\n  Number.isInteger()\r\n  Number.isInteger()用来判断一个数值是否为整数。\r\n\r\n  Number.isInteger(25) // true\r\n  Number.isInteger(25.1) // false\r\n  JavaScript 内部，整数和浮点数采用的是同样的储存方法，所以 25 和 25.0 被视为同一个值。\r\n\r\n  Number.isInteger(25) // true\r\n  Number.isInteger(25.0) // true\r\n  如果参数不是数值，Number.isInteger返回false。\r\n\r\n  Number.isInteger() // false\r\n  Number.isInteger(null) // false\r\n  Number.isInteger('15') // false\r\n  Number.isInteger(true) // false\r\n  注意，由于 JavaScript 采用 IEEE 754 标准，数值存储为64位双精度格式，数值精度最多可以达到 53 个二进制位（1 个隐藏位与 52 个有效位）。如果数值的精度超过这个限度，第54位及后面的位就会被丢弃，这种情况下，Number.isInteger可能会误判。\r\n\r\n  Number.isInteger(3.0000000000000002) // true\r\n  上面代码中，Number.isInteger的参数明明不是整数，但是会返回true。原因就是这个小数的精度达到了小数点后16个十进制位，转成二进制位超过了53个二进制位，导致最后的那个2被丢弃了。\r\n\r\n  类似的情况还有，如果一个数值的绝对值小于Number.MIN_VALUE（5E-324），即小于 JavaScript 能够分辨的最小值，会被自动转为 0。这时，Number.isInteger也会误判。\r\n\r\n  Number.isInteger(5E-324) // false\r\n  Number.isInteger(5E-325) // true\r\n  上面代码中，5E-325由于值太小，会被自动转为0，因此返回true。\r\n\r\n  总之，如果对数据精度的要求较高，不建议使用Number.isInteger()判断一个数值是否为整数。\r\n\r\n  Number.EPSILON\r\n  ES6 在Number对象上面，新增一个极小的常量Number.EPSILON。根据规格，它表示 1 与大于 1 的最小浮点数之间的差。\r\n\r\n  对于 64 位浮点数来说，大于 1 的最小浮点数相当于二进制的1.00..001，小数点后面有连续 51 个零。这个值减去 1 之后，就等于 2 的 -52 次方。\r\n\r\n  Number.EPSILON === Math.pow(2, -52)\r\n  // true\r\n  Number.EPSILON\r\n  // 2.220446049250313e-16\r\n  Number.EPSILON.toFixed(20)\r\n  // \"0.00000000000000022204\"\r\n  Number.EPSILON实际上是 JavaScript 能够表示的最小精度。误差如果小于这个值，就可以认为已经没有意义了，即不存在误差了。\r\n\r\n  引入一个这么小的量的目的，在于为浮点数计算，设置一个误差范围。我们知道浮点数计算是不精确的。\r\n\r\n  0.1 + 0.2\r\n  // 0.30000000000000004\r\n\r\n  0.1 + 0.2 - 0.3\r\n  // 5.551115123125783e-17\r\n\r\n  5.551115123125783e-17.toFixed(20)\r\n  // '0.00000000000000005551'\r\n  上面代码解释了，为什么比较0.1 + 0.2与0.3得到的结果是false。\r\n\r\n  0.1 + 0.2 === 0.3 // false\r\n  Number.EPSILON可以用来设置“能够接受的误差范围”。比如，误差范围设为 2 的-50 次方（即Number.EPSILON * Math.pow(2, 2)），即如果两个浮点数的差小于这个值，我们就认为这两个浮点数相等。\r\n\r\n  5.551115123125783e-17 < Number.EPSILON * Math.pow(2, 2)\r\n  // true\r\n  因此，Number.EPSILON的实质是一个可以接受的最小误差范围。\r\n\r\n  function withinErrorMargin (left, right) {\r\n    return Math.abs(left - right) < Number.EPSILON * Math.pow(2, 2);\r\n  }\r\n\r\n  0.1 + 0.2 === 0.3 // false\r\n  withinErrorMargin(0.1 + 0.2, 0.3) // true\r\n\r\n  1.1 + 1.3 === 2.4 // false\r\n  withinErrorMargin(1.1 + 1.3, 2.4) // true\r\n  上面的代码为浮点数运算，部署了一个误差检查函数。\r\n\r\n  安全整数和 Number.isSafeInteger()\r\n  JavaScript 能够准确表示的整数范围在-2^53到2^53之间（不含两个端点），超过这个范围，无法精确表示这个值。\r\n\r\n  Math.pow(2, 53) // 9007199254740992\r\n\r\n  9007199254740992  // 9007199254740992\r\n  9007199254740993  // 9007199254740992\r\n\r\n  Math.pow(2, 53) === Math.pow(2, 53) + 1\r\n  // true\r\n  上面代码中，超出 2 的 53 次方之后，一个数就不精确了。\r\n\r\n  ES6 引入了Number.MAX_SAFE_INTEGER和Number.MIN_SAFE_INTEGER这两个常量，用来表示这个范围的上下限。\r\n\r\n  Number.MAX_SAFE_INTEGER === Math.pow(2, 53) - 1\r\n  // true\r\n  Number.MAX_SAFE_INTEGER === 9007199254740991\r\n  // true\r\n\r\n  Number.MIN_SAFE_INTEGER === -Number.MAX_SAFE_INTEGER\r\n  // true\r\n  Number.MIN_SAFE_INTEGER === -9007199254740991\r\n  // true\r\n  上面代码中，可以看到 JavaScript 能够精确表示的极限。\r\n\r\n  Number.isSafeInteger()则是用来判断一个整数是否落在这个范围之内。\r\n\r\n  Number.isSafeInteger('a') // false\r\n  Number.isSafeInteger(null) // false\r\n  Number.isSafeInteger(NaN) // false\r\n  Number.isSafeInteger(Infinity) // false\r\n  Number.isSafeInteger(-Infinity) // false\r\n\r\n  Number.isSafeInteger(3) // true\r\n  Number.isSafeInteger(1.2) // false\r\n  Number.isSafeInteger(9007199254740990) // true\r\n  Number.isSafeInteger(9007199254740992) // false\r\n\r\n  Number.isSafeInteger(Number.MIN_SAFE_INTEGER - 1) // false\r\n  Number.isSafeInteger(Number.MIN_SAFE_INTEGER) // true\r\n  Number.isSafeInteger(Number.MAX_SAFE_INTEGER) // true\r\n  Number.isSafeInteger(Number.MAX_SAFE_INTEGER + 1) // false\r\n  这个函数的实现很简单，就是跟安全整数的两个边界值比较一下。\r\n\r\n  Number.isSafeInteger = function (n) {\r\n    return (typeof n === 'number' &&\r\n      Math.round(n) === n &&\r\n      Number.MIN_SAFE_INTEGER <= n &&\r\n      n <= Number.MAX_SAFE_INTEGER);\r\n  }\r\n  实际使用这个函数时，需要注意。验证运算结果是否落在安全整数的范围内，不要只验证运算结果，而要同时验证参与运算的每个值。\r\n\r\n  Number.isSafeInteger(9007199254740993)\r\n  // false\r\n  Number.isSafeInteger(990)\r\n  // true\r\n  Number.isSafeInteger(9007199254740993 - 990)\r\n  // true\r\n  9007199254740993 - 990\r\n  // 返回结果 9007199254740002\r\n  // 正确答案应该是 9007199254740003\r\n  上面代码中，9007199254740993不是一个安全整数，但是Number.isSafeInteger会返回结果，显示计算结果是安全的。这是因为，这个数超出了精度范围，导致在计算机内部，以9007199254740992的形式储存。\r\n\r\n  9007199254740993 === 9007199254740992\r\n  // true\r\n  所以，如果只验证运算结果是否为安全整数，很可能得到错误结果。下面的函数可以同时验证两个运算数和运算结果。\r\n\r\n  function trusty (left, right, result) {\r\n    if (\r\n      Number.isSafeInteger(left) &&\r\n      Number.isSafeInteger(right) &&\r\n      Number.isSafeInteger(result)\r\n    ) {\r\n      return result;\r\n    }\r\n    throw new RangeError('Operation cannot be trusted!');\r\n  }\r\n\r\n  trusty(9007199254740993, 990, 9007199254740993 - 990)\r\n  // RangeError: Operation cannot be trusted!\r\n\r\n  trusty(1, 2, 3)\r\n  // 3\r\n  Math 对象的扩展\r\n  ES6 在 Math 对象上新增了 17 个与数学相关的方法。所有这些方法都是静态方法，只能在 Math 对象上调用。\r\n\r\n  Math.trunc()\r\n  Math.trunc方法用于去除一个数的小数部分，返回整数部分。\r\n\r\n  Math.trunc(4.1) // 4\r\n  Math.trunc(4.9) // 4\r\n  Math.trunc(-4.1) // -4\r\n  Math.trunc(-4.9) // -4\r\n  Math.trunc(-0.1234) // -0\r\n  对于非数值，Math.trunc内部使用Number方法将其先转为数值。\r\n\r\n  Math.trunc('123.456') // 123\r\n  Math.trunc(true) //1\r\n  Math.trunc(false) // 0\r\n  Math.trunc(null) // 0\r\n  对于空值和无法截取整数的值，返回NaN。\r\n\r\n  Math.trunc(NaN);      // NaN\r\n  Math.trunc('foo');    // NaN\r\n  Math.trunc();         // NaN\r\n  Math.trunc(undefined) // NaN\r\n  对于没有部署这个方法的环境，可以用下面的代码模拟。\r\n\r\n  Math.trunc = Math.trunc || function(x) {\r\n    return x < 0 ? Math.ceil(x) : Math.floor(x);\r\n  };\r\n  Math.sign()\r\n  Math.sign方法用来判断一个数到底是正数、负数、还是零。对于非数值，会先将其转换为数值。\r\n\r\n  它会返回五种值。\r\n\r\n  参数为正数，返回+1；\r\n  参数为负数，返回-1；\r\n  参数为 0，返回0；\r\n  参数为-0，返回-0;\r\n  其他值，返回NaN。\r\n  Math.sign(-5) // -1\r\n  Math.sign(5) // +1\r\n  Math.sign(0) // +0\r\n  Math.sign(-0) // -0\r\n  Math.sign(NaN) // NaN\r\n  如果参数是非数值，会自动转为数值。对于那些无法转为数值的值，会返回NaN。\r\n\r\n  Math.sign('')  // 0\r\n  Math.sign(true)  // +1\r\n  Math.sign(false)  // 0\r\n  Math.sign(null)  // 0\r\n  Math.sign('9')  // +1\r\n  Math.sign('foo')  // NaN\r\n  Math.sign()  // NaN\r\n  Math.sign(undefined)  // NaN\r\n  对于没有部署这个方法的环境，可以用下面的代码模拟。\r\n\r\n  Math.sign = Math.sign || function(x) {\r\n    x = +x; // convert to a number\r\n    if (x === 0 || isNaN(x)) {\r\n      return x;\r\n    }\r\n    return x > 0 ? 1 : -1;\r\n  };\r\n  Math.cbrt()\r\n  Math.cbrt()方法用于计算一个数的立方根。\r\n\r\n  Math.cbrt(-1) // -1\r\n  Math.cbrt(0)  // 0\r\n  Math.cbrt(1)  // 1\r\n  Math.cbrt(2)  // 1.2599210498948732\r\n  对于非数值，Math.cbrt()方法内部也是先使用Number()方法将其转为数值。\r\n\r\n  Math.cbrt('8') // 2\r\n  Math.cbrt('hello') // NaN\r\n  对于没有部署这个方法的环境，可以用下面的代码模拟。\r\n\r\n  Math.cbrt = Math.cbrt || function(x) {\r\n    var y = Math.pow(Math.abs(x), 1/3);\r\n    return x < 0 ? -y : y;\r\n  };\r\n  Math.clz32()\r\n  Math.clz32()方法将参数转为 32 位无符号整数的形式，然后返回这个 32 位值里面有多少个前导 0。\r\n\r\n  Math.clz32(0) // 32\r\n  Math.clz32(1) // 31\r\n  Math.clz32(1000) // 22\r\n  Math.clz32(0b01000000000000000000000000000000) // 1\r\n  Math.clz32(0b00100000000000000000000000000000) // 2\r\n  上面代码中，0 的二进制形式全为 0，所以有 32 个前导 0；1 的二进制形式是0b1，只占 1 位，所以 32 位之中有 31 个前导 0；1000 的二进制形式是0b1111101000，一共有 10 位，所以 32 位之中有 22 个前导 0。\r\n\r\n  clz32这个函数名就来自”count leading zero bits in 32-bit binary representation of a number“（计算一个数的 32 位二进制形式的前导 0 的个数）的缩写。\r\n\r\n  左移运算符（<<）与Math.clz32方法直接相关。\r\n\r\n  Math.clz32(0) // 32\r\n  Math.clz32(1) // 31\r\n  Math.clz32(1 << 1) // 30\r\n  Math.clz32(1 << 2) // 29\r\n  Math.clz32(1 << 29) // 2\r\n  对于小数，Math.clz32方法只考虑整数部分。\r\n\r\n  Math.clz32(3.2) // 30\r\n  Math.clz32(3.9) // 30\r\n  对于空值或其他类型的值，Math.clz32方法会将它们先转为数值，然后再计算。\r\n\r\n  Math.clz32() // 32\r\n  Math.clz32(NaN) // 32\r\n  Math.clz32(Infinity) // 32\r\n  Math.clz32(null) // 32\r\n  Math.clz32('foo') // 32\r\n  Math.clz32([]) // 32\r\n  Math.clz32({}) // 32\r\n  Math.clz32(true) // 31\r\n  Math.imul()\r\n  Math.imul方法返回两个数以 32 位带符号整数形式相乘的结果，返回的也是一个 32 位的带符号整数。\r\n\r\n  Math.imul(2, 4)   // 8\r\n  Math.imul(-1, 8)  // -8\r\n  Math.imul(-2, -2) // 4\r\n  如果只考虑最后 32 位，大多数情况下，Math.imul(a, b)与a * b的结果是相同的，即该方法等同于(a * b)|0的效果（超过 32 位的部分溢出）。之所以需要部署这个方法，是因为 JavaScript 有精度限制，超过 2 的 53 次方的值无法精确表示。这就是说，对于那些很大的数的乘法，低位数值往往都是不精确的，Math.imul方法可以返回正确的低位数值。\r\n\r\n  (0x7fffffff * 0x7fffffff)|0 // 0\r\n  上面这个乘法算式，返回结果为 0。但是由于这两个二进制数的最低位都是 1，所以这个结果肯定是不正确的，因为根据二进制乘法，计算结果的二进制最低位应该也是 1。这个错误就是因为它们的乘积超过了 2 的 53 次方，JavaScript 无法保存额外的精度，就把低位的值都变成了 0。Math.imul方法可以返回正确的值 1。\r\n\r\n  Math.imul(0x7fffffff, 0x7fffffff) // 1\r\n  Math.fround()\r\n  Math.fround方法返回一个数的32位单精度浮点数形式。\r\n\r\n  对于32位单精度格式来说，数值精度是24个二进制位（1 位隐藏位与 23 位有效位），所以对于 -224 至 224 之间的整数（不含两个端点），返回结果与参数本身一致。\r\n\r\n  Math.fround(0)   // 0\r\n  Math.fround(1)   // 1\r\n  Math.fround(2 ** 24 - 1)   // 16777215\r\n  如果参数的绝对值大于 224，返回的结果便开始丢失精度。\r\n\r\n  Math.fround(2 ** 24)       // 16777216\r\n  Math.fround(2 ** 24 + 1)   // 16777216\r\n  Math.fround方法的主要作用，是将64位双精度浮点数转为32位单精度浮点数。如果小数的精度超过24个二进制位，返回值就会不同于原值，否则返回值不变（即与64位双精度值一致）。\r\n\r\n  // 未丢失有效精度\r\n  Math.fround(1.125) // 1.125\r\n  Math.fround(7.25)  // 7.25\r\n\r\n  // 丢失精度\r\n  Math.fround(0.3)   // 0.30000001192092896\r\n  Math.fround(0.7)   // 0.699999988079071\r\n  Math.fround(1.0000000123) // 1\r\n  对于 NaN 和 Infinity，此方法返回原值。对于其它类型的非数值，Math.fround 方法会先将其转为数值，再返回单精度浮点数。\r\n\r\n  Math.fround(NaN)      // NaN\r\n  Math.fround(Infinity) // Infinity\r\n\r\n  Math.fround('5')      // 5\r\n  Math.fround(true)     // 1\r\n  Math.fround(null)     // 0\r\n  Math.fround([])       // 0\r\n  Math.fround({})       // NaN\r\n  对于没有部署这个方法的环境，可以用下面的代码模拟。\r\n\r\n  Math.fround = Math.fround || function (x) {\r\n    return new Float32Array([x])[0];\r\n  };\r\n  Math.hypot()\r\n  Math.hypot方法返回所有参数的平方和的平方根。\r\n\r\n  Math.hypot(3, 4);        // 5\r\n  Math.hypot(3, 4, 5);     // 7.0710678118654755\r\n  Math.hypot();            // 0\r\n  Math.hypot(NaN);         // NaN\r\n  Math.hypot(3, 4, 'foo'); // NaN\r\n  Math.hypot(3, 4, '5');   // 7.0710678118654755\r\n  Math.hypot(-3);          // 3\r\n  上面代码中，3 的平方加上 4 的平方，等于 5 的平方。\r\n\r\n  如果参数不是数值，Math.hypot方法会将其转为数值。只要有一个参数无法转为数值，就会返回 NaN。\r\n\r\n  对数方法\r\n  ES6 新增了 4 个对数相关方法。\r\n\r\n  （1） Math.expm1()\r\n\r\n  Math.expm1(x)返回 ex - 1，即Math.exp(x) - 1。\r\n\r\n  Math.expm1(-1) // -0.6321205588285577\r\n  Math.expm1(0)  // 0\r\n  Math.expm1(1)  // 1.718281828459045\r\n  对于没有部署这个方法的环境，可以用下面的代码模拟。\r\n\r\n  Math.expm1 = Math.expm1 || function(x) {\r\n    return Math.exp(x) - 1;\r\n  };\r\n  （2）Math.log1p()\r\n\r\n  Math.log1p(x)方法返回1 + x的自然对数，即Math.log(1 + x)。如果x小于-1，返回NaN。\r\n\r\n  Math.log1p(1)  // 0.6931471805599453\r\n  Math.log1p(0)  // 0\r\n  Math.log1p(-1) // -Infinity\r\n  Math.log1p(-2) // NaN\r\n  对于没有部署这个方法的环境，可以用下面的代码模拟。\r\n\r\n  Math.log1p = Math.log1p || function(x) {\r\n    return Math.log(1 + x);\r\n  };\r\n  （3）Math.log10()\r\n\r\n  Math.log10(x)返回以 10 为底的x的对数。如果x小于 0，则返回 NaN。\r\n\r\n  Math.log10(2)      // 0.3010299956639812\r\n  Math.log10(1)      // 0\r\n  Math.log10(0)      // -Infinity\r\n  Math.log10(-2)     // NaN\r\n  Math.log10(100000) // 5\r\n  对于没有部署这个方法的环境，可以用下面的代码模拟。\r\n\r\n  Math.log10 = Math.log10 || function(x) {\r\n    return Math.log(x) / Math.LN10;\r\n  };\r\n  （4）Math.log2()\r\n\r\n  Math.log2(x)返回以 2 为底的x的对数。如果x小于 0，则返回 NaN。\r\n\r\n  Math.log2(3)       // 1.584962500721156\r\n  Math.log2(2)       // 1\r\n  Math.log2(1)       // 0\r\n  Math.log2(0)       // -Infinity\r\n  Math.log2(-2)      // NaN\r\n  Math.log2(1024)    // 10\r\n  Math.log2(1 << 29) // 29\r\n  对于没有部署这个方法的环境，可以用下面的代码模拟。\r\n\r\n  Math.log2 = Math.log2 || function(x) {\r\n    return Math.log(x) / Math.LN2;\r\n  };\r\n  双曲函数方法\r\n  ES6 新增了 6 个双曲函数方法。\r\n\r\n  Math.sinh(x) 返回x的双曲正弦（hyperbolic sine）\r\n  Math.cosh(x) 返回x的双曲余弦（hyperbolic cosine）\r\n  Math.tanh(x) 返回x的双曲正切（hyperbolic tangent）\r\n  Math.asinh(x) 返回x的反双曲正弦（inverse hyperbolic sine）\r\n  Math.acosh(x) 返回x的反双曲余弦（inverse hyperbolic cosine）\r\n  Math.atanh(x) 返回x的反双曲正切（inverse hyperbolic tangent）\r\n  指数运算符\r\n  ES2016 新增了一个指数运算符（**）。\r\n\r\n  2 ** 2 // 4\r\n  2 ** 3 // 8\r\n  这个运算符的一个特点是右结合，而不是常见的左结合。多个指数运算符连用时，是从最右边开始计算的。\r\n\r\n  // 相当于 2 ** (3 ** 2)\r\n  2 ** 3 ** 2\r\n  // 512\r\n  上面代码中，首先计算的是第二个指数运算符，而不是第一个。\r\n\r\n  指数运算符可以与等号结合，形成一个新的赋值运算符（**=）。\r\n\r\n  let a = 1.5;\r\n  a **= 2;\r\n  // 等同于 a = a * a;\r\n\r\n  let b = 4;\r\n  b **= 3;\r\n  // 等同于 b = b * b * b;\r\n  BigInt 数据类型\r\n  简介\r\n  JavaScript 所有数字都保存成 64 位浮点数，这给数值的表示带来了两大限制。一是数值的精度只能到 53 个二进制位（相当于 16 个十进制位），大于这个范围的整数，JavaScript 是无法精确表示的，这使得 JavaScript 不适合进行科学和金融方面的精确计算。二是大于或等于2的1024次方的数值，JavaScript 无法表示，会返回Infinity。\r\n\r\n  // 超过 53 个二进制位的数值，无法保持精度\r\n  Math.pow(2, 53) === Math.pow(2, 53) + 1 // true\r\n\r\n  // 超过 2 的 1024 次方的数值，无法表示\r\n  Math.pow(2, 1024) // Infinity\r\n  ES2020 引入了一种新的数据类型 BigInt（大整数），来解决这个问题。BigInt 只用来表示整数，没有位数的限制，任何位数的整数都可以精确表示。\r\n\r\n  const a = 2172141653n;\r\n  const b = 15346349309n;\r\n\r\n  // BigInt 可以保持精度\r\n  a * b // 33334444555566667777n\r\n\r\n  // 普通整数无法保持精度\r\n  Number(a) * Number(b) // 33334444555566670000\r\n  为了与 Number 类型区别，BigInt 类型的数据必须添加后缀n。\r\n\r\n  1234 // 普通整数\r\n  1234n // BigInt\r\n\r\n  // BigInt 的运算\r\n  1n + 2n // 3n\r\n  BigInt 同样可以使用各种进制表示，都要加上后缀n。\r\n\r\n  0b1101n // 二进制\r\n  0o777n // 八进制\r\n  0xFFn // 十六进制\r\n  BigInt 与普通整数是两种值，它们之间并不相等。\r\n\r\n  42n === 42 // false\r\n  typeof运算符对于 BigInt 类型的数据返回bigint。\r\n\r\n  typeof 123n // 'bigint'\r\n  BigInt 可以使用负号（-），但是不能使用正号（+），因为会与 asm.js 冲突。\r\n\r\n  -42n // 正确\r\n  +42n // 报错\r\n  JavaScript 以前不能计算70的阶乘（即70!），因为超出了可以表示的精度。\r\n\r\n  let p = 1;\r\n  for (let i = 1; i <= 70; i++) {\r\n    p *= i;\r\n  }\r\n  console.log(p); // 1.197857166996989e+100\r\n  现在支持大整数了，就可以算了，浏览器的开发者工具运行下面代码，就OK。\r\n\r\n  let p = 1n;\r\n  for (let i = 1n; i <= 70n; i++) {\r\n    p *= i;\r\n  }\r\n  console.log(p); // 11978571...00000000n\r\n  BigInt 对象\r\n  JavaScript 原生提供BigInt对象，可以用作构造函数生成 BigInt 类型的数值。转换规则基本与Number()一致，将其他类型的值转为 BigInt。\r\n\r\n  BigInt(123) // 123n\r\n  BigInt('123') // 123n\r\n  BigInt(false) // 0n\r\n  BigInt(true) // 1n\r\n  BigInt()构造函数必须有参数，而且参数必须可以正常转为数值，下面的用法都会报错。\r\n\r\n  new BigInt() // TypeError\r\n  BigInt(undefined) //TypeError\r\n  BigInt(null) // TypeError\r\n  BigInt('123n') // SyntaxError\r\n  BigInt('abc') // SyntaxError\r\n  上面代码中，尤其值得注意字符串123n无法解析成 Number 类型，所以会报错。\r\n\r\n  参数如果是小数，也会报错。\r\n\r\n  BigInt(1.5) // RangeError\r\n  BigInt('1.5') // SyntaxError\r\n  BigInt 对象继承了 Object 对象的两个实例方法。\r\n\r\n  BigInt.prototype.toString()\r\n  BigInt.prototype.valueOf()\r\n  它还继承了 Number 对象的一个实例方法。\r\n\r\n  BigInt.prototype.toLocaleString()\r\n  此外，还提供了三个静态方法。\r\n\r\n  BigInt.asUintN(width, BigInt)： 给定的 BigInt 转为 0 到 2width - 1 之间对应的值。\r\n  BigInt.asIntN(width, BigInt)：给定的 BigInt 转为 -2width - 1 到 2width - 1 - 1 之间对应的值。\r\n  BigInt.parseInt(string[, radix])：近似于Number.parseInt()，将一个字符串转换成指定进制的 BigInt。\r\n  const max = 2n ** (64n - 1n) - 1n;\r\n\r\n  BigInt.asIntN(64, max)\r\n  // 9223372036854775807n\r\n  BigInt.asIntN(64, max + 1n)\r\n  // -9223372036854775808n\r\n  BigInt.asUintN(64, max + 1n)\r\n  // 9223372036854775808n\r\n  上面代码中，max是64位带符号的 BigInt 所能表示的最大值。如果对这个值加1n，BigInt.asIntN()将会返回一个负值，因为这时新增的一位将被解释为符号位。而BigInt.asUintN()方法由于不存在符号位，所以可以正确返回结果。\r\n\r\n  如果BigInt.asIntN()和BigInt.asUintN()指定的位数，小于数值本身的位数，那么头部的位将被舍弃。\r\n\r\n  const max = 2n ** (64n - 1n) - 1n;\r\n\r\n  BigInt.asIntN(32, max) // -1n\r\n  BigInt.asUintN(32, max) // 4294967295n\r\n  上面代码中，max是一个64位的 BigInt，如果转为32位，前面的32位都会被舍弃。\r\n\r\n  下面是BigInt.parseInt()的例子。\r\n\r\n  // Number.parseInt() 与 BigInt.parseInt() 的对比\r\n  Number.parseInt('9007199254740993', 10)\r\n  // 9007199254740992\r\n  BigInt.parseInt('9007199254740993', 10)\r\n  // 9007199254740993n\r\n  上面代码中，由于有效数字超出了最大限度，Number.parseInt方法返回的结果是不精确的，而BigInt.parseInt方法正确返回了对应的 BigInt。\r\n\r\n  对于二进制数组，BigInt 新增了两个类型BigUint64Array和BigInt64Array，这两种数据类型返回的都是64位 BigInt。DataView对象的实例方法DataView.prototype.getBigInt64()和DataView.prototype.getBigUint64()，返回的也是 BigInt。\r\n\r\n  转换规则\r\n  可以使用Boolean()、Number()和String()这三个方法，将 BigInt 可以转为布尔值、数值和字符串类型。\r\n\r\n  Boolean(0n) // false\r\n  Boolean(1n) // true\r\n  Number(1n)  // 1\r\n  String(1n)  // \"1\"\r\n  上面代码中，注意最后一个例子，转为字符串时后缀n会消失。\r\n\r\n  另外，取反运算符（!）也可以将 BigInt 转为布尔值。\r\n\r\n  !0n // true\r\n  !1n // false\r\n  数学运算\r\n  数学运算方面，BigInt 类型的+、-、*和**这四个二元运算符，与 Number 类型的行为一致。除法运算/会舍去小数部分，返回一个整数。\r\n\r\n  9n / 5n\r\n  // 1n\r\n  几乎所有的数值运算符都可以用在 BigInt，但是有两个例外。\r\n\r\n  不带符号的右移位运算符>>>\r\n  一元的求正运算符+\r\n  上面两个运算符用在 BigInt 会报错。前者是因为>>>运算符是不带符号的，但是 BigInt 总是带有符号的，导致该运算无意义，完全等同于右移运算符>>。后者是因为一元运算符+在 asm.js 里面总是返回 Number 类型，为了不破坏 asm.js 就规定+1n会报错。\r\n\r\n  BigInt 不能与普通数值进行混合运算。\r\n\r\n  1n + 1.3 // 报错\r\n  上面代码报错是因为无论返回的是 BigInt 或 Number，都会导致丢失精度信息。比如(2n**53n + 1n) + 0.5这个表达式，如果返回 BigInt 类型，0.5这个小数部分会丢失；如果返回 Number 类型，有效精度只能保持 53 位，导致精度下降。\r\n\r\n  同样的原因，如果一个标准库函数的参数预期是 Number 类型，但是得到的是一个 BigInt，就会报错。\r\n\r\n  // 错误的写法\r\n  Math.sqrt(4n) // 报错\r\n\r\n  // 正确的写法\r\n  Math.sqrt(Number(4n)) // 2\r\n  上面代码中，Math.sqrt的参数预期是 Number 类型，如果是 BigInt 就会报错，必须先用Number方法转一下类型，才能进行计算。\r\n\r\n  asm.js 里面，|0跟在一个数值的后面会返回一个32位整数。根据不能与 Number 类型混合运算的规则，BigInt 如果与|0进行运算会报错。\r\n\r\n  1n | 0 // 报错\r\n  其他运算\r\n  BigInt 对应的布尔值，与 Number 类型一致，即0n会转为false，其他值转为true。\r\n\r\n  if (0n) {\r\n    console.log('if');\r\n  } else {\r\n    console.log('else');\r\n  }\r\n  // else\r\n  上面代码中，0n对应false，所以会进入else子句。\r\n\r\n  比较运算符（比如>）和相等运算符（==）允许 BigInt 与其他类型的值混合计算，因为这样做不会损失精度。\r\n\r\n  0n < 1 // true\r\n  0n < true // true\r\n  0n == 0 // true\r\n  0n == false // true\r\n  0n === 0 // false\r\n  BigInt 与字符串混合运算时，会先转为字符串，再进行运算。\r\n\r\n  '' + 123n // \"123\"\r\n")])])}],i={name:"04Number"},u=i,N=t("2877"),s=Object(N["a"])(u,e,a,!1,null,"58af99e0",null);n["default"]=s.exports}}]);
//# sourceMappingURL=chunk-2d0ab8b4.8f688cb4.js.map