(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-2d2219f8"],{caae:function(r,n,e){"use strict";e.r(n);var t=function(){var r=this,n=r.$createElement;r._self._c;return r._m(0)},o=[function(){var r=this,n=r.$createElement,e=r._self._c||n;return e("div",{staticClass:"ref-type"},[e("pre",[r._v("\r\n# 函数的扩展\r\n  ## 函数参数的默认值\r\n  ### 基本用法\r\n  **1**\r\n  ES6 之前，\r\n  不能直接为函数的参数指定默认值，\r\n  只能采用变通的方法。\r\n\r\n  function log(x, y) {\r\n    y = y || 'World';\r\n    console.log(x, y);\r\n  }\r\n\r\n  log('Hello') // Hello World\r\n  log('Hello', 'China') // Hello China\r\n  log('Hello', '') // Hello World\r\n  上面代码检查函数log的参数y有没有赋值，\r\n  如果没有，\r\n  则指定默认值为World。\r\n\r\n  这种写法的缺点在于，\r\n  如果参数y赋值了，\r\n  但是对应的布尔值为false，\r\n  则该赋值不起作用。\r\n\r\n  就像上面代码的最后一行，\r\n  参数y等于空字符，\r\n  结果被改为默认值。\r\n\r\n  为了避免这个问题，\r\n  通常需要先判断一下参数y是否被赋值，\r\n  如果没有，\r\n  再等于默认值。\r\n\r\n  if (typeof y === 'undefined') {\r\n    y = 'World';\r\n  }\r\n\r\n  **2**\r\n  ES6 允许为函数的参数设置默认值，\r\n  即直接写在参数定义的后面。\r\n\r\n  function log(x, y = 'World') {\r\n    console.log(x, y);\r\n  }\r\n\r\n  log('Hello') // Hello World\r\n  log('Hello', 'China') // Hello China\r\n  log('Hello', '') // Hello\r\n\r\n  function Point(x = 0, y = 0) {\r\n    this.x = x;\r\n    this.y = y;\r\n  }\r\n\r\n  const p = new Point();\r\n  p // { x: 0, y: 0 }\r\n\r\n  **3**\r\n  ES6 的写法有3个好处\r\n  简洁；\r\n  阅读代码的人，\r\n  可以立刻意识到哪些参数是可以省略的，\r\n  不用查看函数体或文档；\r\n  其次，有利于将来的代码优化，\r\n  即使未来的版本在对外接口中，\r\n  彻底拿掉这个参数，\r\n  也不会导致以前的代码无法运行。\r\n\r\n  **4**\r\n  参数变量是默认声明的，\r\n  所以不能用let或const再次声明。\r\n\r\n  function foo(x = 5) {\r\n    let x = 1; // error\r\n    const x = 2; // error\r\n  }\r\n  上面代码中，\r\n  参数变量x是默认声明的，\r\n  在函数体中，\r\n  不能用let或const再次声明，\r\n  否则会报错。\r\n\r\n  使用参数默认值时，\r\n  函数不能有同名参数。\r\n\r\n  // 不报错\r\n  function foo(x, x, y) {\r\n    // ...\r\n  }\r\n\r\n  // 报错\r\n  function foo(x, x, y = 1) {\r\n    // ...\r\n  }\r\n  // SyntaxError: Duplicate parameter name not allowed in this context\r\n\r\n  参数默认值不是传值的，\r\n  而是每次都重新计算默认值表达式的值。\r\n  也就是说，\r\n  参数默认值是惰性求值的。\r\n\r\n  let x = 99;\r\n  function foo(p = x + 1) {\r\n    console.log(p);\r\n  }\r\n\r\n  foo() // 100\r\n\r\n  x = 100;\r\n  foo() // 101\r\n\r\n  上面代码中，\r\n  参数p的默认值是x + 1。\r\n  这时，\r\n  每次调用函数foo，\r\n  都会重新计算x + 1，\r\n  而不是默认p等于 100。\r\n\r\n  **5**\r\n  与解构赋值默认值结合使用\r\n  参数默认值可以与解构赋值的默认值，\r\n  结合起来使用。\r\n\r\n  function foo({x, y = 5}) {\r\n    console.log(x, y);\r\n  }\r\n\r\n  foo({}) // undefined 5\r\n  foo({x: 1}) // 1 5\r\n  foo({x: 1, y: 2}) // 1 2\r\n  foo() // TypeError: Cannot read property 'x' of undefined\r\n  上面代码只使用了对象的解构赋值默认值，\r\n  没有使用函数参数的默认值。\r\n  只有当函数foo的参数是一个对象时，\r\n  变量x和y才会通过解构赋值生成。\r\n  如果函数foo调用时没提供参数，\r\n  变量x和y就不会生成，\r\n  从而报错。\r\n  通过提供函数参数的默认值，\r\n  就可以避免这种情况。\r\n\r\n  function foo({x, y = 5} = {}) {\r\n    console.log(x, y);\r\n  }\r\n\r\n  foo() // undefined 5\r\n  上面代码指定，\r\n  如果没有提供参数，\r\n  函数foo的参数默认为一个空对象。\r\n\r\n  下面是另一个解构赋值默认值的例子。\r\n\r\n  function fetch(url, { body = '', method = 'GET', headers = {} }) {\r\n    console.log(method);\r\n  }\r\n\r\n  fetch('http://example.com', {})\r\n  // \"GET\"\r\n\r\n  fetch('http://example.com')\r\n  // 报错\r\n  上面代码中，\r\n  如果函数fetch的第二个参数是一个对象，\r\n  就可以为它的三个属性设置默认值。这种写法不能省略第二个参数，\r\n  如果结合函数参数的默认值，\r\n  就可以省略第二个参数。这时，\r\n  就出现了双重默认值。\r\n\r\n  function fetch(url, { body = '', method = 'GET', headers = {} } = {}) {\r\n    console.log(method);\r\n  }\r\n\r\n  fetch('http://example.com')\r\n  // \"GET\"\r\n  上面代码中，\r\n  函数fetch没有第二个参数时，\r\n  函数参数的默认值就会生效，\r\n  然后才是解构赋值的默认值生效，\r\n  变量method才会取到默认值GET。\r\n\r\n  作为练习，\r\n  请问下面两种写法有什么差别？\r\n\r\n  // 写法一\r\n  function m1({x = 0, y = 0} = {}) {\r\n    return [x, y];\r\n  }\r\n\r\n  // 写法二\r\n  function m2({x, y} = { x: 0, y: 0 }) {\r\n    return [x, y];\r\n  }\r\n  上面两种写法都对函数的参数设定了默认值，\r\n  区别是写法一函数参数的默认值是空对象，\r\n  但是设置了对象解构赋值的默认值；写法二函数参数的默认值是一个有具体属性的对象，\r\n  但是没有设置对象解构赋值的默认值。\r\n\r\n  // 函数没有参数的情况\r\n  m1() // [0, 0]\r\n  m2() // [0, 0]\r\n\r\n  // x 和 y 都有值的情况\r\n  m1({x: 3, y: 8}) // [3, 8]\r\n  m2({x: 3, y: 8}) // [3, 8]\r\n\r\n  // x 有值，\r\n  y 无值的情况\r\n  m1({x: 3}) // [3, 0]\r\n  m2({x: 3}) // [3, undefined]\r\n\r\n  // x 和 y 都无值的情况\r\n  m1({}) // [0, 0];\r\n  m2({}) // [undefined, undefined]\r\n\r\n  m1({z: 3}) // [0, 0]\r\n  m2({z: 3}) // [undefined, undefined]\r\n  参数默认值的位置\r\n  通常情况下，\r\n  定义了默认值的参数，\r\n  应该是函数的尾参数。因为这样比较容易看出来，\r\n  到底省略了哪些参数。如果非尾部的参数设置默认值，\r\n  实际上这个参数是没法省略的。\r\n\r\n  // 例一\r\n  function f(x = 1, y) {\r\n    return [x, y];\r\n  }\r\n\r\n  f() // [1, undefined]\r\n  f(2) // [2, undefined]\r\n  f(, 1) // 报错\r\n  f(undefined, 1) // [1, 1]\r\n\r\n  // 例二\r\n  function f(x, y = 5, z) {\r\n    return [x, y, z];\r\n  }\r\n\r\n  f() // [undefined, 5, undefined]\r\n  f(1) // [1, 5, undefined]\r\n  f(1, ,2) // 报错\r\n  f(1, undefined, 2) // [1, 5, 2]\r\n  上面代码中，\r\n  有默认值的参数都不是尾参数。这时，\r\n  无法只省略该参数，\r\n  而不省略它后面的参数，\r\n  除非显式输入undefined。\r\n\r\n  如果传入undefined，\r\n  将触发该参数等于默认值，\r\n  null则没有这个效果。\r\n\r\n  function foo(x = 5, y = 6) {\r\n    console.log(x, y);\r\n  }\r\n\r\n  foo(undefined, null)\r\n  // 5 null\r\n  上面代码中，\r\n  x参数对应undefined，\r\n  结果触发了默认值，\r\n  y参数等于null，\r\n  就没有触发默认值。\r\n\r\n  **6**\r\n  函数的 length 属性\r\n  指定了默认值以后，\r\n  函数的length属性，\r\n  将返回没有指定默认值的参数个数。也就是说，\r\n  指定了默认值后，\r\n  length属性将失真。\r\n\r\n  (function (a) {}).length // 1\r\n  (function (a = 5) {}).length // 0\r\n  (function (a, b, c = 5) {}).length // 2\r\n  上面代码中，\r\n  length属性的返回值，\r\n  等于函数的参数个数减去指定了默认值的参数个数。\r\n  比如，\r\n  上面最后一个函数，\r\n  定义了 3 个参数，\r\n  其中有一个参数c指定了默认值，\r\n  因此length属性等于3减去1，\r\n  最后得到2。\r\n\r\n  这是因为length属性的含义是，\r\n  该函数预期传入的参数个数。某个参数指定默认值以后，\r\n  预期传入的参数个数就不包括这个参数了。\r\n  同理，\r\n  后文的 rest 参数也不会计入length属性。\r\n\r\n  (function(...args) {}).length // 0\r\n  如果设置了默认值的参数不是尾参数，\r\n  那么length属性也不再计入后面的参数了。\r\n\r\n  (function (a = 0, b, c) {}).length // 0\r\n  (function (a, b = 1, c) {}).length // 1\r\n\r\n  **7**\r\n  作用域\r\n  一旦设置了参数的默认值，\r\n  函数进行声明初始化时，\r\n  参数会形成一个单独的作用域（context）。等到初始化结束，\r\n  这个作用域就会消失。这种语法行为，\r\n  在不设置参数默认值时，\r\n  是不会出现的。\r\n\r\n  var x = 1;\r\n\r\n  function f(x, y = x) {\r\n    console.log(y);\r\n  }\r\n\r\n  f(2) // 2\r\n  上面代码中，\r\n  参数y的默认值等于变量x。调用函数f时，\r\n  参数形成一个单独的作用域。在这个作用域里面，\r\n  默认值变量x指向第一个参数x，\r\n  而不是全局变量x，\r\n  所以输出是2。\r\n\r\n  再看下面的例子。\r\n\r\n  let x = 1;\r\n\r\n  function f(y = x) {\r\n    let x = 2;\r\n    console.log(y);\r\n  }\r\n\r\n  f() // 1\r\n  上面代码中，\r\n  函数f调用时，\r\n  参数y = x形成一个单独的作用域。这个作用域里面，\r\n  变量x本身没有定义，\r\n  所以指向外层的全局变量x。函数调用时，\r\n  函数体内部的局部变量x影响不到默认值变量x。\r\n\r\n  如果此时，\r\n  全局变量x不存在，\r\n  就会报错。\r\n\r\n  function f(y = x) {\r\n    let x = 2;\r\n    console.log(y);\r\n  }\r\n\r\n  f() // ReferenceError: x is not defined\r\n  下面这样写，\r\n  也会报错。\r\n\r\n  var x = 1;\r\n\r\n  function foo(x = x) {\r\n    // ...\r\n  }\r\n\r\n  foo() // ReferenceError: x is not defined\r\n  上面代码中，\r\n  参数x = x形成一个单独作用域。实际执行的是let x = x，\r\n  由于暂时性死区的原因，\r\n  这行代码会报错”x 未定义“。\r\n\r\n  如果参数的默认值是一个函数，\r\n  该函数的作用域也遵守这个规则。请看下面的例子。\r\n\r\n  let foo = 'outer';\r\n\r\n  function bar(func = () => foo) {\r\n    let foo = 'inner';\r\n    console.log(func());\r\n  }\r\n\r\n  bar(); // outer\r\n  上面代码中，\r\n  函数bar的参数func的默认值是一个匿名函数，\r\n  返回值为变量foo。函数参数形成的单独作用域里面，\r\n  并没有定义变量foo，\r\n  所以foo指向外层的全局变量foo，\r\n  因此输出outer。\r\n\r\n  如果写成下面这样，\r\n  就会报错。\r\n\r\n  function bar(func = () => foo) {\r\n    let foo = 'inner';\r\n    console.log(func());\r\n  }\r\n\r\n  bar() // ReferenceError: foo is not defined\r\n  上面代码中，\r\n  匿名函数里面的foo指向函数外层，\r\n  但是函数外层并没有声明变量foo，\r\n  所以就报错了。\r\n\r\n  下面是一个更复杂的例子。\r\n\r\n  var x = 1;\r\n  function foo(x, y = function() { x = 2; }) {\r\n    var x = 3;\r\n    y();\r\n    console.log(x);\r\n  }\r\n\r\n  foo() // 3\r\n  x // 1\r\n  上面代码中，\r\n  函数foo的参数形成一个单独作用域。这个作用域里面，\r\n  首先声明了变量x，\r\n  然后声明了变量y，\r\n  y的默认值是一个匿名函数。这个匿名函数内部的变量x，\r\n  指向同一个作用域的第一个参数x。函数foo内部又声明了一个内部变量x，\r\n  该变量与第一个参数x由于不是同一个作用域，\r\n  所以不是同一个变量，\r\n  因此执行y后，\r\n  内部变量x和外部全局变量x的值都没变。\r\n\r\n  如果将var x = 3的var去除，\r\n  函数foo的内部变量x就指向第一个参数x，\r\n  与匿名函数内部的x是一致的，\r\n  所以最后输出的就是2，\r\n  而外层的全局变量x依然不受影响。\r\n\r\n  var x = 1;\r\n  function foo(x, y = function() { x = 2; }) {\r\n    x = 3;\r\n    y();\r\n    console.log(x);\r\n  }\r\n\r\n  foo() // 2\r\n  x // 1\r\n\r\n  **8**\r\n  应用\r\n  利用参数默认值，\r\n  可以指定某一个参数不得省略，\r\n  如果省略就抛出一个错误。\r\n\r\n  function throwIfMissing() {\r\n    throw new Error('Missing parameter');\r\n  }\r\n\r\n  function foo(mustBeProvided = throwIfMissing()) {\r\n    return mustBeProvided;\r\n  }\r\n\r\n  foo()\r\n  // Error: Missing parameter\r\n  上面代码的foo函数，\r\n  如果调用的时候没有参数，\r\n  就会调用默认值throwIfMissing函数，\r\n  从而抛出一个错误。\r\n\r\n  从上面代码还可以看到，\r\n  参数mustBeProvided的默认值等于throwIfMissing函数的运行结果（注意函数名throwIfMissing之后有一对圆括号），\r\n  这表明参数的默认值不是在定义时执行，\r\n  而是在运行时执行。如果参数已经赋值，\r\n  默认值中的函数就不会运行。\r\n\r\n  另外，\r\n  可以将参数默认值设为undefined，\r\n  表明这个参数是可以省略的。\r\n\r\n  function foo(optional = undefined) { ··· }\r\n\r\n  ### rest 参数\r\n  ES6 引入 rest 参数（形式为...变量名），\r\n  用于获取函数的多余参数，\r\n  这样就不需要使用arguments对象了。rest 参数搭配的变量是一个数组，\r\n  该变量将多余的参数放入数组中。\r\n\r\n  function add(...values) {\r\n    let sum = 0;\r\n\r\n    for (var val of values) {\r\n      sum += val;\r\n    }\r\n\r\n    return sum;\r\n  }\r\n\r\n  add(2, 5, 3) // 10\r\n  上面代码的add函数是一个求和函数，\r\n  利用 rest 参数，\r\n  可以向该函数传入任意数目的参数。\r\n\r\n  下面是一个 rest 参数代替arguments变量的例子。\r\n\r\n  // arguments变量的写法\r\n  function sortNumbers() {\r\n    return Array.prototype.slice.call(arguments).sort();\r\n  }\r\n\r\n  // rest参数的写法\r\n  const sortNumbers = (...numbers) => numbers.sort();\r\n  上面代码的两种写法，\r\n  比较后可以发现，\r\n  rest 参数的写法更自然也更简洁。\r\n\r\n  arguments对象不是数组，\r\n  而是一个类似数组的对象。所以为了使用数组的方法，\r\n  必须使用Array.prototype.slice.call先将其转为数组。rest 参数就不存在这个问题，\r\n  它就是一个真正的数组，\r\n  数组特有的方法都可以使用。下面是一个利用 rest 参数改写数组push方法的例子。\r\n\r\n  function push(array, ...items) {\r\n    items.forEach(function(item) {\r\n      array.push(item);\r\n      console.log(item);\r\n    });\r\n  }\r\n\r\n  var a = [];\r\n  push(a, 1, 2, 3)\r\n  注意，\r\n  rest 参数之后不能再有其他参数（即只能是最后一个参数），\r\n  否则会报错。\r\n\r\n  // 报错\r\n  function f(a, ...b, c) {\r\n    // ...\r\n  }\r\n  函数的length属性，\r\n  不包括 rest 参数。\r\n\r\n  (function(a) {}).length  // 1\r\n  (function(...a) {}).length  // 0\r\n  (function(a, ...b) {}).length  // 1\r\n\r\n  ### 严格模式\r\n  从 ES5 开始，\r\n  函数内部可以设定为严格模式。\r\n\r\n  function doSomething(a, b) {\r\n    'use strict';\r\n    // code\r\n  }\r\n  ES2016 做了一点修改，\r\n  规定只要函数参数使用了默认值、解构赋值、或者扩展运算符，\r\n  那么函数内部就不能显式设定为严格模式，\r\n  否则会报错。\r\n\r\n  // 报错\r\n  function doSomething(a, b = a) {\r\n    'use strict';\r\n    // code\r\n  }\r\n\r\n  // 报错\r\n  const doSomething = function ({a, b}) {\r\n    'use strict';\r\n    // code\r\n  };\r\n\r\n  // 报错\r\n  const doSomething = (...a) => {\r\n    'use strict';\r\n    // code\r\n  };\r\n\r\n  const obj = {\r\n    // 报错\r\n    doSomething({a, b}) {\r\n      'use strict';\r\n      // code\r\n    }\r\n  };\r\n  这样规定的原因是，\r\n  函数内部的严格模式，\r\n  同时适用于函数体和函数参数。但是，\r\n  函数执行的时候，\r\n  先执行函数参数，\r\n  然后再执行函数体。这样就有一个不合理的地方，\r\n  只有从函数体之中，\r\n  才能知道参数是否应该以严格模式执行，\r\n  但是参数却应该先于函数体执行。\r\n\r\n  // 报错\r\n  function doSomething(value = 070) {\r\n    'use strict';\r\n    return value;\r\n  }\r\n  上面代码中，\r\n  参数value的默认值是八进制数070，\r\n  但是严格模式下不能用前缀0表示八进制，\r\n  所以应该报错。但是实际上，\r\n  JavaScript 引擎会先成功执行value = 070，\r\n  然后进入函数体内部，\r\n  发现需要用严格模式执行，\r\n  这时才会报错。\r\n\r\n  虽然可以先解析函数体代码，\r\n  再执行参数代码，\r\n  但是这样无疑就增加了复杂性。因此，\r\n  标准索性禁止了这种用法，\r\n  只要参数使用了默认值、解构赋值、或者扩展运算符，\r\n  就不能显式指定严格模式。\r\n\r\n  两种方法可以规避这种限制。第一种是设定全局性的严格模式，\r\n  这是合法的。\r\n\r\n  'use strict';\r\n\r\n  function doSomething(a, b = a) {\r\n    // code\r\n  }\r\n  第二种是把函数包在一个无参数的立即执行函数里面。\r\n\r\n  const doSomething = (function () {\r\n    'use strict';\r\n    return function(value = 42) {\r\n      return value;\r\n    };\r\n  }());\r\n\r\n  ### name 属性\r\n  函数的name属性，\r\n  返回该函数的函数名。\r\n\r\n  function foo() {}\r\n  foo.name // \"foo\"\r\n  这个属性早就被浏览器广泛支持，\r\n  但是直到 ES6，\r\n  才将其写入了标准。\r\n\r\n  需要注意的是，\r\n  ES6 对这个属性的行为做出了一些修改。如果将一个匿名函数赋值给一个变量，\r\n  ES5 的name属性，\r\n  会返回空字符串，\r\n  而 ES6 的name属性会返回实际的函数名。\r\n\r\n  var f = function () {};\r\n\r\n  // ES5\r\n  f.name // \"\"\r\n\r\n  // ES6\r\n  f.name // \"f\"\r\n  上面代码中，\r\n  变量f等于一个匿名函数，\r\n  ES5 和 ES6 的name属性返回的值不一样。\r\n\r\n  如果将一个具名函数赋值给一个变量，\r\n  则 ES5 和 ES6 的name属性都返回这个具名函数原本的名字。\r\n\r\n  const bar = function baz() {};\r\n\r\n  // ES5\r\n  bar.name // \"baz\"\r\n\r\n  // ES6\r\n  bar.name // \"baz\"\r\n  Function构造函数返回的函数实例，\r\n  name属性的值为anonymous。\r\n\r\n  (new Function).name // \"anonymous\"\r\n  bind返回的函数，\r\n  name属性值会加上bound前缀。\r\n\r\n  function foo() {};\r\n  foo.bind({}).name // \"bound foo\"\r\n\r\n  (function(){}).bind({}).name // \"bound \"\r\n  ### 箭头函数\r\n  **1**\r\n  基本用法\r\n  ES6 允许使用“箭头”（=>）定义函数。\r\n\r\n  var f = v => v;\r\n\r\n  // 等同于\r\n  var f = function (v) {\r\n    return v;\r\n  };\r\n  如果箭头函数不需要参数或需要多个参数，\r\n  就使用一个圆括号代表参数部分。\r\n\r\n  var f = () => 5;\r\n  // 等同于\r\n  var f = function () { return 5 };\r\n\r\n  var sum = (num1, num2) => num1 + num2;\r\n  // 等同于\r\n  var sum = function(num1, num2) {\r\n    return num1 + num2;\r\n  };\r\n  如果箭头函数的代码块部分多于一条语句，\r\n  就要使用大括号将它们括起来，\r\n  并且使用return语句返回。\r\n\r\n  var sum = (num1, num2) => { return num1 + num2; }\r\n  由于大括号被解释为代码块，\r\n  所以如果箭头函数直接返回一个对象，\r\n  必须在对象外面加上括号，\r\n  否则会报错。\r\n\r\n  // 报错\r\n  let getTempItem = id => { id: id, name: \"Temp\" };\r\n\r\n  // 不报错\r\n  let getTempItem = id => ({ id: id, name: \"Temp\" });\r\n  下面是一种特殊情况，\r\n  虽然可以运行，\r\n  但会得到错误的结果。\r\n\r\n  let foo = () => { a: 1 };\r\n  foo() // undefined\r\n  上面代码中，\r\n  原始意图是返回一个对象{ a: 1 }，\r\n  但是由于引擎认为大括号是代码块，\r\n  所以执行了一行语句a: 1。这时，\r\n  a可以被解释为语句的标签，\r\n  因此实际执行的语句是1;，\r\n  然后函数就结束了，\r\n  没有返回值。\r\n\r\n  如果箭头函数只有一行语句，\r\n  且不需要返回值，\r\n  可以采用下面的写法，\r\n  就不用写大括号了。\r\n\r\n  let fn = () => void doesNotReturn();\r\n  箭头函数可以与变量解构结合使用。\r\n\r\n  const full = ({ first, last }) => first + ' ' + last;\r\n\r\n  // 等同于\r\n  function full(person) {\r\n    return person.first + ' ' + person.last;\r\n  }\r\n  箭头函数使得表达更加简洁。\r\n\r\n  const isEven = n => n % 2 === 0;\r\n  const square = n => n * n;\r\n  上面代码只用了两行，\r\n  就定义了两个简单的工具函数。如果不用箭头函数，\r\n  可能就要占用多行，\r\n  而且还不如现在这样写醒目。\r\n\r\n  箭头函数的一个用处是简化回调函数。\r\n\r\n  // 正常函数写法\r\n  [1,2,3].map(function (x) {\r\n    return x * x;\r\n  });\r\n\r\n  // 箭头函数写法\r\n  [1,2,3].map(x => x * x);\r\n  另一个例子是\r\n\r\n  // 正常函数写法\r\n  var result = values.sort(function (a, b) {\r\n    return a - b;\r\n  });\r\n\r\n  // 箭头函数写法\r\n  var result = values.sort((a, b) => a - b);\r\n  下面是 rest 参数与箭头函数结合的例子。\r\n\r\n  const numbers = (...nums) => nums;\r\n\r\n  numbers(1, 2, 3, 4, 5)\r\n  // [1,2,3,4,5]\r\n\r\n  const headAndTail = (head, ...tail) => [head, tail];\r\n\r\n  headAndTail(1, 2, 3, 4, 5)\r\n  // [1,[2,3,4,5]]\r\n\r\n  **2**\r\n  使用注意点\r\n  箭头函数有几个使用注意点。\r\n\r\n  （1）函数体内的this对象，\r\n  就是定义时所在的对象，\r\n  而不是使用时所在的对象。\r\n\r\n  （2）不可以当作构造函数，\r\n  也就是说，\r\n  不可以使用new命令，\r\n  否则会抛出一个错误。\r\n\r\n  （3）不可以使用arguments对象，\r\n  该对象在函数体内不存在。如果要用，\r\n  可以用 rest 参数代替。\r\n\r\n  （4）不可以使用yield命令，\r\n  因此箭头函数不能用作 Generator 函数。\r\n\r\n  上面四点中，\r\n  第一点尤其值得注意。this对象的指向是可变的，\r\n  但是在箭头函数中，\r\n  它是固定的。\r\n\r\n  function foo() {\r\n    setTimeout(() => {\r\n      console.log('id:', this.id);\r\n    }, 100);\r\n  }\r\n\r\n  var id = 21;\r\n\r\n  foo.call({ id: 42 });\r\n  // id: 42\r\n  上面代码中，\r\n  setTimeout的参数是一个箭头函数，\r\n  这个箭头函数的定义生效是在foo函数生成时，\r\n  而它的真正执行要等到 100 毫秒后。如果是普通函数，\r\n  执行时this应该指向全局对象window，\r\n  这时应该输出21。但是，\r\n  箭头函数导致this总是指向函数定义生效时所在的对象（本例是{id: 42}），\r\n  所以输出的是42。\r\n\r\n  箭头函数可以让setTimeout里面的this，\r\n  绑定定义时所在的作用域，\r\n  而不是指向运行时所在的作用域。下面是另一个例子。\r\n\r\n  function Timer() {\r\n    this.s1 = 0;\r\n    this.s2 = 0;\r\n    // 箭头函数\r\n    setInterval(() => this.s1++, 1000);\r\n    // 普通函数\r\n    setInterval(function () {\r\n      this.s2++;\r\n    }, 1000);\r\n  }\r\n\r\n  var timer = new Timer();\r\n\r\n  setTimeout(() => console.log('s1: ', timer.s1), 3100);\r\n  setTimeout(() => console.log('s2: ', timer.s2), 3100);\r\n  // s1: 3\r\n  // s2: 0\r\n  上面代码中，\r\n  Timer函数内部设置了两个定时器，\r\n  分别使用了箭头函数和普通函数。前者的this绑定定义时所在的作用域（即Timer函数），\r\n  后者的this指向运行时所在的作用域（即全局对象）。所以，\r\n  3100 毫秒之后，\r\n  timer.s1被更新了 3 次，\r\n  而timer.s2一次都没更新。\r\n\r\n  箭头函数可以让this指向固定化，\r\n  这种特性很有利于封装回调函数。下面是一个例子，\r\n  DOM 事件的回调函数封装在一个对象里面。\r\n\r\n  var handler = {\r\n    id: '123456',\r\n\r\n    init: function() {\r\n      document.addEventListener('click',\r\n        event => this.doSomething(event.type), false);\r\n    },\r\n\r\n    doSomething: function(type) {\r\n      console.log('Handling ' + type  + ' for ' + this.id);\r\n    }\r\n  };\r\n  上面代码的init方法中，\r\n  使用了箭头函数，\r\n  这导致这个箭头函数里面的this，\r\n  总是指向handler对象。否则，\r\n  回调函数运行时，\r\n  this.doSomething这一行会报错，\r\n  因为此时this指向document对象。\r\n\r\n  this指向的固定化，\r\n  并不是因为箭头函数内部有绑定this的机制，\r\n  实际原因是箭头函数根本没有自己的this，\r\n  导致内部的this就是外层代码块的this。正是因为它没有this，\r\n  所以也就不能用作构造函数。\r\n\r\n  所以，\r\n  箭头函数转成 ES5 的代码如下。\r\n\r\n  // ES6\r\n  function foo() {\r\n    setTimeout(() => {\r\n      console.log('id:', this.id);\r\n    }, 100);\r\n  }\r\n\r\n  // ES5\r\n  function foo() {\r\n    var _this = this;\r\n\r\n    setTimeout(function () {\r\n      console.log('id:', _this.id);\r\n    }, 100);\r\n  }\r\n  上面代码中，\r\n  转换后的 ES5 版本清楚地说明了，\r\n  箭头函数里面根本没有自己的this，\r\n  而是引用外层的this。\r\n\r\n  请问下面的代码之中有几个this？\r\n\r\n  function foo() {\r\n    return () => {\r\n      return () => {\r\n        return () => {\r\n          console.log('id:', this.id);\r\n        };\r\n      };\r\n    };\r\n  }\r\n\r\n  var f = foo.call({id: 1});\r\n\r\n  var t1 = f.call({id: 2})()(); // id: 1\r\n  var t2 = f().call({id: 3})(); // id: 1\r\n  var t3 = f()().call({id: 4}); // id: 1\r\n  上面代码之中，\r\n  只有一个this，\r\n  就是函数foo的this，\r\n  所以t1、t2、t3都输出同样的结果。因为所有的内层函数都是箭头函数，\r\n  都没有自己的this，\r\n  它们的this其实都是最外层foo函数的this。\r\n\r\n  除了this，\r\n  以下三个变量在箭头函数之中也是不存在的，\r\n  指向外层函数的对应变量：arguments、super、new.target。\r\n\r\n  function foo() {\r\n    setTimeout(() => {\r\n      console.log('args:', arguments);\r\n    }, 100);\r\n  }\r\n\r\n  foo(2, 4, 6, 8)\r\n  // args: [2, 4, 6, 8]\r\n  上面代码中，\r\n  箭头函数内部的变量arguments，\r\n  其实是函数foo的arguments变量。\r\n\r\n  另外，\r\n  由于箭头函数没有自己的this，\r\n  所以当然也就不能用call()、apply()、bind()这些方法去改变this的指向。\r\n\r\n  (function() {\r\n    return [\r\n      (() => this.x).bind({ x: 'inner' })()\r\n    ];\r\n  }).call({ x: 'outer' });\r\n  // ['outer']\r\n  上面代码中，\r\n  箭头函数没有自己的this，\r\n  所以bind方法无效，\r\n  内部的this指向外部的this。\r\n\r\n  长期以来，\r\n  JavaScript 语言的this对象一直是一个令人头痛的问题，\r\n  在对象方法中使用this，\r\n  必须非常小心。箭头函数”绑定”this，\r\n  很大程度上解决了这个困扰。\r\n\r\n  **3**\r\n  不适用场合\r\n  由于箭头函数使得this从“动态”变成“静态”，\r\n  下面两个场合不应该使用箭头函数。\r\n\r\n  第一个场合是定义对象的方法，\r\n  且该方法内部包括this。\r\n\r\n  const cat = {\r\n    lives: 9,\r\n    jumps: () => {\r\n      this.lives--;\r\n    }\r\n  }\r\n  上面代码中，\r\n  cat.jumps()方法是一个箭头函数，\r\n  这是错误的。调用cat.jumps()时，\r\n  如果是普通函数，\r\n  该方法内部的this指向cat；如果写成上面那样的箭头函数，\r\n  使得this指向全局对象，\r\n  因此不会得到预期结果。这是因为对象不构成单独的作用域，\r\n  导致jumps箭头函数定义时的作用域就是全局作用域。\r\n\r\n  第二个场合是需要动态this的时候，\r\n  也不应使用箭头函数。\r\n\r\n  var button = document.getElementById('press');\r\n  button.addEventListener('click', () => {\r\n    this.classList.toggle('on');\r\n  });\r\n  上面代码运行时，\r\n  点击按钮会报错，\r\n  因为button的监听函数是一个箭头函数，\r\n  导致里面的this就是全局对象。如果改成普通函数，\r\n  this就会动态指向被点击的按钮对象。\r\n\r\n  另外，\r\n  如果函数体很复杂，\r\n  有许多行，\r\n  或者函数内部有大量的读写操作，\r\n  不单纯是为了计算值，\r\n  这时也不应该使用箭头函数，\r\n  而是要使用普通函数，\r\n  这样可以提高代码可读性。\r\n\r\n  **4**\r\n  嵌套的箭头函数\r\n  箭头函数内部，\r\n  还可以再使用箭头函数。下面是一个 ES5 语法的多重嵌套函数。\r\n\r\n  function insert(value) {\r\n    return {into: function (array) {\r\n      return {after: function (afterValue) {\r\n        array.splice(array.indexOf(afterValue) + 1, 0, value);\r\n        return array;\r\n      }};\r\n    }};\r\n  }\r\n\r\n  insert(2).into([1, 3]).after(1); //[1, 2, 3]\r\n  上面这个函数，\r\n  可以使用箭头函数改写。\r\n\r\n  let insert = (value) => ({into: (array) => ({after: (afterValue) => {\r\n    array.splice(array.indexOf(afterValue) + 1, 0, value);\r\n    return array;\r\n  }})});\r\n\r\n  insert(2).into([1, 3]).after(1); //[1, 2, 3]\r\n  下面是一个部署管道机制（pipeline）的例子，\r\n  即前一个函数的输出是后一个函数的输入。\r\n\r\n  const pipeline = (...funcs) =>\r\n    val => funcs.reduce((a, b) => b(a), val);\r\n\r\n  const plus1 = a => a + 1;\r\n  const mult2 = a => a * 2;\r\n  const addThenMult = pipeline(plus1, mult2);\r\n\r\n  addThenMult(5)\r\n  // 12\r\n  如果觉得上面的写法可读性比较差，\r\n  也可以采用下面的写法。\r\n\r\n  const plus1 = a => a + 1;\r\n  const mult2 = a => a * 2;\r\n\r\n  mult2(plus1(5))\r\n  // 12\r\n  箭头函数还有一个功能，\r\n  就是可以很方便地改写 λ 演算。\r\n\r\n  // λ演算的写法\r\n  fix = λf.(λx.f(λv.x(x)(v)))(λx.f(λv.x(x)(v)))\r\n\r\n  // ES6的写法\r\n  var fix = f => (x => f(v => x(x)(v)))\r\n                (x => f(v => x(x)(v)));\r\n  上面两种写法，\r\n  几乎是一一对应的。由于 λ 演算对于计算机科学非常重要，\r\n  这使得我们可以用 ES6 作为替代工具，\r\n  探索计算机科学。\r\n\r\n  ### 尾调用优化\r\n  **1**\r\n  什么是尾调用？\r\n  尾调用（Tail Call）是函数式编程的一个重要概念，\r\n  本身非常简单，\r\n  一句话就能说清楚，\r\n  就是指某个函数的最后一步是调用另一个函数。\r\n\r\n  function f(x){\r\n    return g(x);\r\n  }\r\n  上面代码中，\r\n  函数f的最后一步是调用函数g，\r\n  这就叫尾调用。\r\n\r\n  以下三种情况，\r\n  都不属于尾调用。\r\n\r\n  // 情况一\r\n  function f(x){\r\n    let y = g(x);\r\n    return y;\r\n  }\r\n\r\n  // 情况二\r\n  function f(x){\r\n    return g(x) + 1;\r\n  }\r\n\r\n  // 情况三\r\n  function f(x){\r\n    g(x);\r\n  }\r\n  上面代码中，\r\n  情况一是调用函数g之后，\r\n  还有赋值操作，\r\n  所以不属于尾调用，\r\n  即使语义完全一样。情况二也属于调用后还有操作，\r\n  即使写在一行内。情况三等同于下面的代码。\r\n\r\n  function f(x){\r\n    g(x);\r\n    return undefined;\r\n  }\r\n  尾调用不一定出现在函数尾部，\r\n  只要是最后一步操作即可。\r\n\r\n  function f(x) {\r\n    if (x > 0) {\r\n      return m(x)\r\n    }\r\n    return n(x);\r\n  }\r\n  上面代码中，\r\n  函数m和n都属于尾调用，\r\n  因为它们都是函数f的最后一步操作。\r\n\r\n  **2**\r\n  尾调用优化\r\n  尾调用之所以与其他调用不同，\r\n  就在于它的特殊的调用位置。\r\n\r\n  我们知道，\r\n  函数调用会在内存形成一个“调用记录”，\r\n  又称“调用帧”（call frame），\r\n  保存调用位置和内部变量等信息。如果在函数A的内部调用函数B，\r\n  那么在A的调用帧上方，\r\n  还会形成一个B的调用帧。等到B运行结束，\r\n  将结果返回到A，\r\n  B的调用帧才会消失。如果函数B内部还调用函数C，\r\n  那就还有一个C的调用帧，\r\n  以此类推。所有的调用帧，\r\n  就形成一个“调用栈”（call stack）。\r\n\r\n  尾调用由于是函数的最后一步操作，\r\n  所以不需要保留外层函数的调用帧，\r\n  因为调用位置、内部变量等信息都不会再用到了，\r\n  只要直接用内层函数的调用帧，\r\n  取代外层函数的调用帧就可以了。\r\n\r\n  function f() {\r\n    let m = 1;\r\n    let n = 2;\r\n    return g(m + n);\r\n  }\r\n  f();\r\n\r\n  // 等同于\r\n  function f() {\r\n    return g(3);\r\n  }\r\n  f();\r\n\r\n  // 等同于\r\n  g(3);\r\n  上面代码中，\r\n  如果函数g不是尾调用，\r\n  函数f就需要保存内部变量m和n的值、g的调用位置等信息。但由于调用g之后，\r\n  函数f就结束了，\r\n  所以执行到最后一步，\r\n  完全可以删除f(x)的调用帧，\r\n  只保留g(3)的调用帧。\r\n\r\n  这就叫做“尾调用优化”（Tail call optimization），\r\n  即只保留内层函数的调用帧。如果所有函数都是尾调用，\r\n  那么完全可以做到每次执行时，\r\n  调用帧只有一项，\r\n  这将大大节省内存。这就是“尾调用优化”的意义。\r\n\r\n  注意，\r\n  只有不再用到外层函数的内部变量，\r\n  内层函数的调用帧才会取代外层函数的调用帧，\r\n  否则就无法进行“尾调用优化”。\r\n\r\n  function addOne(a){\r\n    var one = 1;\r\n    function inner(b){\r\n      return b + one;\r\n    }\r\n    return inner(a);\r\n  }\r\n  上面的函数不会进行尾调用优化，\r\n  因为内层函数inner用到了外层函数addOne的内部变量one。\r\n\r\n  注意，\r\n  目前只有 Safari 浏览器支持尾调用优化，\r\n  Chrome 和 Firefox 都不支持。\r\n\r\n  **3**\r\n  尾递归\r\n  函数调用自身，\r\n  称为递归。如果尾调用自身，\r\n  就称为尾递归。\r\n\r\n  递归非常耗费内存，\r\n  因为需要同时保存成千上百个调用帧，\r\n  很容易发生“栈溢出”错误（stack overflow）。但对于尾递归来说，\r\n  由于只存在一个调用帧，\r\n  所以永远不会发生“栈溢出”错误。\r\n\r\n  function factorial(n) {\r\n    if (n === 1) return 1;\r\n    return n * factorial(n - 1);\r\n  }\r\n\r\n  factorial(5) // 120\r\n  上面代码是一个阶乘函数，\r\n  计算n的阶乘，\r\n  最多需要保存n个调用记录，\r\n  复杂度 O(n) 。\r\n\r\n  如果改写成尾递归，\r\n  只保留一个调用记录，\r\n  复杂度 O(1) 。\r\n\r\n  function factorial(n, total) {\r\n    if (n === 1) return total;\r\n    return factorial(n - 1, n * total);\r\n  }\r\n\r\n  factorial(5, 1) // 120\r\n  还有一个比较著名的例子，\r\n  就是计算 Fibonacci 数列，\r\n  也能充分说明尾递归优化的重要性。\r\n\r\n  非尾递归的 Fibonacci 数列实现如下。\r\n\r\n  function Fibonacci (n) {\r\n    if ( n <= 1 ) {return 1};\r\n\r\n    return Fibonacci(n - 1) + Fibonacci(n - 2);\r\n  }\r\n\r\n  Fibonacci(10) // 89\r\n  Fibonacci(100) // 超时\r\n  Fibonacci(500) // 超时\r\n  尾递归优化过的 Fibonacci 数列实现如下。\r\n\r\n  function Fibonacci2 (n , ac1 = 1 , ac2 = 1) {\r\n    if( n <= 1 ) {return ac2};\r\n\r\n    return Fibonacci2 (n - 1, ac2, ac1 + ac2);\r\n  }\r\n\r\n  Fibonacci2(100) // 573147844013817200000\r\n  Fibonacci2(1000) // 7.0330367711422765e+208\r\n  Fibonacci2(10000) // Infinity\r\n  由此可见，\r\n  “尾调用优化”对递归操作意义重大，\r\n  所以一些函数式编程语言将其写入了语言规格。ES6 亦是如此，\r\n  第一次明确规定，\r\n  所有 ECMAScript 的实现，\r\n  都必须部署“尾调用优化”。这就是说，\r\n  ES6 中只要使用尾递归，\r\n  就不会发生栈溢出（或者层层递归造成的超时），\r\n  相对节省内存。\r\n\r\n  **4**\r\n  递归函数的改写\r\n  尾递归的实现，\r\n  往往需要改写递归函数，\r\n  确保最后一步只调用自身。做到这一点的方法，\r\n  就是把所有用到的内部变量改写成函数的参数。比如上面的例子，\r\n  阶乘函数 factorial 需要用到一个中间变量total，\r\n  那就把这个中间变量改写成函数的参数。这样做的缺点就是不太直观，\r\n  第一眼很难看出来，\r\n  为什么计算5的阶乘，\r\n  需要传入两个参数5和1？\r\n\r\n  两个方法可以解决这个问题。方法一是在尾递归函数之外，\r\n  再提供一个正常形式的函数。\r\n\r\n  function tailFactorial(n, total) {\r\n    if (n === 1) return total;\r\n    return tailFactorial(n - 1, n * total);\r\n  }\r\n\r\n  function factorial(n) {\r\n    return tailFactorial(n, 1);\r\n  }\r\n\r\n  factorial(5) // 120\r\n  上面代码通过一个正常形式的阶乘函数factorial，\r\n  调用尾递归函数tailFactorial，\r\n  看起来就正常多了。\r\n\r\n  函数式编程有一个概念，\r\n  叫做柯里化（currying），\r\n  意思是将多参数的函数转换成单参数的形式。这里也可以使用柯里化。\r\n\r\n  function currying(fn, n) {\r\n    return function (m) {\r\n      return fn.call(this, m, n);\r\n    };\r\n  }\r\n\r\n  function tailFactorial(n, total) {\r\n    if (n === 1) return total;\r\n    return tailFactorial(n - 1, n * total);\r\n  }\r\n\r\n  const factorial = currying(tailFactorial, 1);\r\n\r\n  factorial(5) // 120\r\n  上面代码通过柯里化，\r\n  将尾递归函数tailFactorial变为只接受一个参数的factorial。\r\n\r\n  第二种方法就简单多了，\r\n  就是采用 ES6 的函数默认值。\r\n\r\n  function factorial(n, total = 1) {\r\n    if (n === 1) return total;\r\n    return factorial(n - 1, n * total);\r\n  }\r\n\r\n  factorial(5) // 120\r\n  上面代码中，\r\n  参数total有默认值1，\r\n  所以调用时不用提供这个值。\r\n\r\n  总结一下，\r\n  递归本质上是一种循环操作。纯粹的函数式编程语言没有循环操作命令，\r\n  所有的循环都用递归实现，\r\n  这就是为什么尾递归对这些语言极其重要。对于其他支持“尾调用优化”的语言（比如 Lua，\r\n  ES6），\r\n  只需要知道循环可以用递归代替，\r\n  而一旦使用递归，\r\n  就最好使用尾递归。\r\n\r\n  **5**\r\n  严格模式\r\n  ES6 的尾调用优化只在严格模式下开启，\r\n  正常模式是无效的。\r\n\r\n  这是因为在正常模式下，\r\n  函数内部有两个变量，\r\n  可以跟踪函数的调用栈。\r\n\r\n  func.arguments：返回调用时函数的参数。\r\n  func.caller：返回调用当前函数的那个函数。\r\n  尾调用优化发生时，\r\n  函数的调用栈会改写，\r\n  因此上面两个变量就会失真。严格模式禁用这两个变量，\r\n  所以尾调用模式仅在严格模式下生效。\r\n\r\n  function restricted() {\r\n    'use strict';\r\n    restricted.caller;    // 报错\r\n    restricted.arguments; // 报错\r\n  }\r\n  restricted();\r\n\r\n  **6**\r\n  尾递归优化的实现\r\n  尾递归优化只在严格模式下生效，\r\n  那么正常模式下，\r\n  或者那些不支持该功能的环境中，\r\n  有没有办法也使用尾递归优化呢？回答是可以的，\r\n  就是自己实现尾递归优化。\r\n\r\n  它的原理非常简单。尾递归之所以需要优化，\r\n  原因是调用栈太多，\r\n  造成溢出，\r\n  那么只要减少调用栈，\r\n  就不会溢出。怎么做可以减少调用栈呢？就是采用“循环”换掉“递归”。\r\n\r\n  下面是一个正常的递归函数。\r\n\r\n  function sum(x, y) {\r\n    if (y > 0) {\r\n      return sum(x + 1, y - 1);\r\n    } else {\r\n      return x;\r\n    }\r\n  }\r\n\r\n  sum(1, 100000)\r\n  // Uncaught RangeError: Maximum call stack size exceeded(…)\r\n  上面代码中，\r\n  sum是一个递归函数，\r\n  参数x是需要累加的值，\r\n  参数y控制递归次数。一旦指定sum递归 100000 次，\r\n  就会报错，\r\n  提示超出调用栈的最大次数。\r\n\r\n  蹦床函数（trampoline）可以将递归执行转为循环执行。\r\n\r\n  function trampoline(f) {\r\n    while (f && f instanceof Function) {\r\n      f = f();\r\n    }\r\n    return f;\r\n  }\r\n  上面就是蹦床函数的一个实现，\r\n  它接受一个函数f作为参数。只要f执行后返回一个函数，\r\n  就继续执行。注意，\r\n  这里是返回一个函数，\r\n  然后执行该函数，\r\n  而不是函数里面调用函数，\r\n  这样就避免了递归执行，\r\n  从而就消除了调用栈过大的问题。\r\n\r\n  然后，\r\n  要做的就是将原来的递归函数，\r\n  改写为每一步返回另一个函数。\r\n\r\n  function sum(x, y) {\r\n    if (y > 0) {\r\n      return sum.bind(null, x + 1, y - 1);\r\n    } else {\r\n      return x;\r\n    }\r\n  }\r\n  上面代码中，\r\n  sum函数的每次执行，\r\n  都会返回自身的另一个版本。\r\n\r\n  现在，\r\n  使用蹦床函数执行sum，\r\n  就不会发生调用栈溢出。\r\n\r\n  trampoline(sum(1, 100000))\r\n  // 100001\r\n  蹦床函数并不是真正的尾递归优化，\r\n  下面的实现才是。\r\n\r\n  function tco(f) {\r\n    var value;\r\n    var active = false;\r\n    var accumulated = [];\r\n\r\n    return function accumulator() {\r\n      accumulated.push(arguments);\r\n      if (!active) {\r\n        active = true;\r\n        while (accumulated.length) {\r\n          value = f.apply(this, accumulated.shift());\r\n        }\r\n        active = false;\r\n        return value;\r\n      }\r\n    };\r\n  }\r\n\r\n  var sum = tco(function(x, y) {\r\n    if (y > 0) {\r\n      return sum(x + 1, y - 1)\r\n    }\r\n    else {\r\n      return x\r\n    }\r\n  });\r\n\r\n  sum(1, 100000)\r\n  // 100001\r\n  上面代码中，\r\n  tco函数是尾递归优化的实现，\r\n  它的奥妙就在于状态变量active。默认情况下，\r\n  这个变量是不激活的。一旦进入尾递归优化的过程，\r\n  这个变量就激活了。然后，\r\n  每一轮递归sum返回的都是undefined，\r\n  所以就避免了递归执行；而accumulated数组存放每一轮sum执行的参数，\r\n  总是有值的，\r\n  这就保证了accumulator函数内部的while循环总是会执行。这样就很巧妙地将“递归”改成了“循环”，\r\n  而后一轮的参数会取代前一轮的参数，\r\n  保证了调用栈只有一层。\r\n\r\n  ### 函数参数的尾逗号\r\n  ES2017 允许函数的最后一个参数有尾逗号（trailing comma）。\r\n\r\n  此前，\r\n  函数定义和调用时，\r\n  都不允许最后一个参数后面出现逗号。\r\n\r\n  function clownsEverywhere(\r\n    param1,\r\n    param2\r\n  ) { /* ... */ }\r\n\r\n  clownsEverywhere(\r\n    'foo',\r\n    'bar'\r\n  );\r\n  上面代码中，\r\n  如果在param2或bar后面加一个逗号，\r\n  就会报错。\r\n\r\n  如果像上面这样，\r\n  将参数写成多行（即每个参数占据一行），\r\n  以后修改代码的时候，\r\n  想为函数clownsEverywhere添加第三个参数，\r\n  或者调整参数的次序，\r\n  就势必要在原来最后一个参数后面添加一个逗号。这对于版本管理系统来说，\r\n  就会显示添加逗号的那一行也发生了变动。这看上去有点冗余，\r\n  因此新的语法允许定义和调用时，\r\n  尾部直接有一个逗号。\r\n\r\n  function clownsEverywhere(\r\n    param1,\r\n    param2,\r\n  ) { /* ... */ }\r\n\r\n  clownsEverywhere(\r\n    'foo',\r\n    'bar',\r\n  );\r\n  这样的规定也使得，\r\n  函数参数与数组和对象的尾逗号规则，\r\n  保持一致了。\r\n\r\n  ### Function.prototype.toString()\r\n  ES2019 对函数实例的toString()方法做出了修改。\r\n\r\n  toString()方法返回函数代码本身，\r\n  以前会省略注释和空格。\r\n\r\n  function /* foo comment */ foo () {}\r\n\r\n  foo.toString()\r\n  // function foo() {}\r\n  上面代码中，\r\n  函数foo的原始代码包含注释，\r\n  函数名foo和圆括号之间有空格，\r\n  但是toString()方法都把它们省略了。\r\n\r\n  修改后的toString()方法，\r\n  明确要求返回一模一样的原始代码。\r\n\r\n  function /* foo comment */ foo () {}\r\n\r\n  foo.toString()\r\n  // \"function /* foo comment */ foo () {}\"\r\n\r\n  ### catch 命令的参数省略\r\n  JavaScript 语言的try...catch结构，\r\n  以前明确要求catch命令后面必须跟参数，\r\n  接受try代码块抛出的错误对象。\r\n\r\n  try {\r\n    // ...\r\n  } catch (err) {\r\n    // 处理错误\r\n  }\r\n  上面代码中，\r\n  catch命令后面带有参数err。\r\n\r\n  很多时候，\r\n  catch代码块可能用不到这个参数。但是，\r\n  为了保证语法正确，\r\n  还是必须写。ES2019 做出了改变，\r\n  允许catch语句省略参数。\r\n\r\n  try {\r\n    // ...\r\n  } catch {\r\n    // ...\r\n  }\r\n")]),e("pre",[r._v("\r\n数组的扩展\r\n  ### 扩展运算符\r\n  **1**\r\n  含义\r\n  扩展运算符（spread）是三个点（...）。\r\n  好比 rest 参数的逆运算，\r\n  将一个数组转为用逗号分隔的参数序列。\r\n\r\n  console.log(...[1, 2, 3])\r\n  // 1 2 3\r\n\r\n  console.log(1, ...[2, 3, 4], 5)\r\n  // 1 2 3 4 5\r\n\r\n  [...document.querySelectorAll('div')]\r\n  // [<div>, <div>, <div>]\r\n  该运算符主要用于函数调用。\r\n\r\n  function push(array, ...items) {\r\n    array.push(...items);\r\n  }\r\n\r\n  function add(x, y) {\r\n    return x + y;\r\n  }\r\n\r\n  const numbers = [4, 38];\r\n  add(...numbers) // 42\r\n  上面代码中，\r\n  array.push(...items)和add(...numbers)这两行，\r\n  都是函数的调用，\r\n  它们都使用了扩展运算符。该运算符将一个数组，\r\n  变为参数序列。\r\n\r\n  扩展运算符与正常的函数参数可以结合使用，\r\n  非常灵活。\r\n\r\n  function f(v, w, x, y, z) { }\r\n  const args = [0, 1];\r\n  f(-1, ...args, 2, ...[3]);\r\n  扩展运算符后面还可以放置表达式。\r\n\r\n  const arr = [\r\n    ...(x > 0 ? ['a'] : []),\r\n    'b',\r\n  ];\r\n  如果扩展运算符后面是一个空数组，\r\n  则不产生任何效果。\r\n\r\n  [...[], 1]\r\n  // [1]\r\n  注意，\r\n  只有函数调用时，\r\n  扩展运算符才可以放在圆括号中，\r\n  否则会报错。\r\n\r\n  (...[1, 2])\r\n  // Uncaught SyntaxError: Unexpected number\r\n\r\n  console.log((...[1, 2]))\r\n  // Uncaught SyntaxError: Unexpected number\r\n\r\n  console.log(...[1, 2])\r\n  // 1 2\r\n  上面三种情况，\r\n  扩展运算符都放在圆括号里面，\r\n  但是前两种情况会报错，\r\n  因为扩展运算符所在的括号不是函数调用。\r\n\r\n  **2**\r\n  替代函数的 apply 方法\r\n  由于扩展运算符可以展开数组，\r\n  所以不再需要apply方法，\r\n  将数组转为函数的参数了。\r\n\r\n  // ES5 的写法\r\n  function f(x, y, z) {\r\n    // ...\r\n  }\r\n  var args = [0, 1, 2];\r\n  f.apply(null, args);\r\n\r\n  // ES6的写法\r\n  function f(x, y, z) {\r\n    // ...\r\n  }\r\n  let args = [0, 1, 2];\r\n  f(...args);\r\n  下面是扩展运算符取代apply方法的一个实际的例子，\r\n  应用Math.max方法，\r\n  简化求出一个数组最大元素的写法。\r\n\r\n  // ES5 的写法\r\n  Math.max.apply(null, [14, 3, 77])\r\n\r\n  // ES6 的写法\r\n  Math.max(...[14, 3, 77])\r\n\r\n  // 等同于\r\n  Math.max(14, 3, 77);\r\n  上面代码中，\r\n  由于 JavaScript 不提供求数组最大元素的函数，\r\n  所以只能套用Math.max函数，\r\n  将数组转为一个参数序列，\r\n  然后求最大值。有了扩展运算符以后，\r\n  就可以直接用Math.max了。\r\n\r\n  另一个例子是通过push函数，\r\n  将一个数组添加到另一个数组的尾部。\r\n\r\n  // ES5的 写法\r\n  var arr1 = [0, 1, 2];\r\n  var arr2 = [3, 4, 5];\r\n  Array.prototype.push.apply(arr1, arr2);\r\n\r\n  // ES6 的写法\r\n  let arr1 = [0, 1, 2];\r\n  let arr2 = [3, 4, 5];\r\n  arr1.push(...arr2);\r\n  上面代码的 ES5 写法中，\r\n  push方法的参数不能是数组，\r\n  所以只好通过apply方法变通使用push方法。有了扩展运算符，\r\n  就可以直接将数组传入push方法。\r\n\r\n  下面是另外一个例子。\r\n\r\n  // ES5\r\n  new (Date.bind.apply(Date, [null, 2015, 1, 1]))\r\n  // ES6\r\n  new Date(...[2015, 1, 1]);\r\n\r\n  **3**\r\n  扩展运算符的应用\r\n  （1）复制数组\r\n\r\n  数组是复合的数据类型，\r\n  直接复制的话，\r\n  只是复制了指向底层数据结构的指针，\r\n  而不是克隆一个全新的数组。\r\n\r\n  const a1 = [1, 2];\r\n  const a2 = a1;\r\n\r\n  a2[0] = 2;\r\n  a1 // [2, 2]\r\n  上面代码中，\r\n  a2并不是a1的克隆，\r\n  而是指向同一份数据的另一个指针。修改a2，\r\n  会直接导致a1的变化。\r\n\r\n  ES5 只能用变通方法来复制数组。\r\n\r\n  const a1 = [1, 2];\r\n  const a2 = a1.concat();\r\n\r\n  a2[0] = 2;\r\n  a1 // [1, 2]\r\n  上面代码中，\r\n  a1会返回原数组的克隆，\r\n  再修改a2就不会对a1产生影响。\r\n\r\n  扩展运算符提供了复制数组的简便写法。\r\n\r\n  const a1 = [1, 2];\r\n  // 写法一\r\n  const a2 = [...a1];\r\n  // 写法二\r\n  const [...a2] = a1;\r\n  上面的两种写法，\r\n  a2都是a1的克隆。\r\n\r\n  （2）合并数组\r\n\r\n  扩展运算符提供了数组合并的新写法。\r\n\r\n  const arr1 = ['a', 'b'];\r\n  const arr2 = ['c'];\r\n  const arr3 = ['d', 'e'];\r\n\r\n  // ES5 的合并数组\r\n  arr1.concat(arr2, arr3);\r\n  // [ 'a', 'b', 'c', 'd', 'e' ]\r\n\r\n  // ES6 的合并数组\r\n  [...arr1, ...arr2, ...arr3]\r\n  // [ 'a', 'b', 'c', 'd', 'e' ]\r\n  不过，\r\n  这两种方法都是浅拷贝，\r\n  使用的时候需要注意。\r\n\r\n  const a1 = [{ foo: 1 }];\r\n  const a2 = [{ bar: 2 }];\r\n\r\n  const a3 = a1.concat(a2);\r\n  const a4 = [...a1, ...a2];\r\n\r\n  a3[0] === a1[0] // true\r\n  a4[0] === a1[0] // true\r\n  上面代码中，\r\n  a3和a4是用两种不同方法合并而成的新数组，\r\n  但是它们的成员都是对原数组成员的引用，\r\n  这就是浅拷贝。如果修改了引用指向的值，\r\n  会同步反映到新数组。\r\n\r\n  （3）与解构赋值结合\r\n\r\n  扩展运算符可以与解构赋值结合起来，\r\n  用于生成数组。\r\n\r\n  // ES5\r\n  a = list[0], rest = list.slice(1)\r\n  // ES6\r\n  [a, ...rest] = list\r\n  下面是另外一些例子。\r\n\r\n  const [first, ...rest] = [1, 2, 3, 4, 5];\r\n  first // 1\r\n  rest  // [2, 3, 4, 5]\r\n\r\n  const [first, ...rest] = [];\r\n  first // undefined\r\n  rest  // []\r\n\r\n  const [first, ...rest] = [\"foo\"];\r\n  first  // \"foo\"\r\n  rest   // []\r\n  如果将扩展运算符用于数组赋值，\r\n  只能放在参数的最后一位，\r\n  否则会报错。\r\n\r\n  const [...butLast, last] = [1, 2, 3, 4, 5];\r\n  // 报错\r\n\r\n  const [first, ...middle, last] = [1, 2, 3, 4, 5];\r\n  // 报错\r\n  （4）字符串\r\n\r\n  扩展运算符还可以将字符串转为真正的数组。\r\n\r\n  [...'hello']\r\n  // [ \"h\", \"e\", \"l\", \"l\", \"o\" ]\r\n  上面的写法，\r\n  有一个重要的好处，\r\n  那就是能够正确识别四个字节的 Unicode 字符。\r\n\r\n  'x\\uD83D\\uDE80y'.length // 4\r\n  [...'x\\uD83D\\uDE80y'].length // 3\r\n  上面代码的第一种写法，\r\n  JavaScript 会将四个字节的 Unicode 字符，\r\n  识别为 2 个字符，\r\n  采用扩展运算符就没有这个问题。因此，\r\n  正确返回字符串长度的函数，\r\n  可以像下面这样写。\r\n\r\n  function length(str) {\r\n    return [...str].length;\r\n  }\r\n\r\n  length('x\\uD83D\\uDE80y') // 3\r\n  凡是涉及到操作四个字节的 Unicode 字符的函数，\r\n  都有这个问题。因此，\r\n  最好都用扩展运算符改写。\r\n\r\n  let str = 'x\\uD83D\\uDE80y';\r\n\r\n  str.split('').reverse().join('')\r\n  // 'y\\uDE80\\uD83Dx'\r\n\r\n  [...str].reverse().join('')\r\n  // 'y\\uD83D\\uDE80x'\r\n  上面代码中，\r\n  如果不用扩展运算符，\r\n  字符串的reverse操作就不正确。\r\n\r\n  （5）实现了 Iterator 接口的对象\r\n\r\n  任何定义了遍历器（Iterator）接口的对象（参阅 Iterator 一章），\r\n  都可以用扩展运算符转为真正的数组。\r\n\r\n  let nodeList = document.querySelectorAll('div');\r\n  let array = [...nodeList];\r\n  上面代码中，\r\n  querySelectorAll方法返回的是一个NodeList对象。它不是数组，\r\n  而是一个类似数组的对象。这时，\r\n  扩展运算符可以将其转为真正的数组，\r\n  原因就在于NodeList对象实现了 Iterator 。\r\n\r\n  Number.prototype[Symbol.iterator] = function*() {\r\n    let i = 0;\r\n    let num = this.valueOf();\r\n    while (i < num) {\r\n      yield i++;\r\n    }\r\n  }\r\n\r\n  console.log([...5]) // [0, 1, 2, 3, 4]\r\n  上面代码中，\r\n  先定义了Number对象的遍历器接口，\r\n  扩展运算符将5自动转成Number实例以后，\r\n  就会调用这个接口，\r\n  就会返回自定义的结果。\r\n\r\n  对于那些没有部署 Iterator 接口的类似数组的对象，\r\n  扩展运算符就无法将其转为真正的数组。\r\n\r\n  let arrayLike = {\r\n    '0': 'a',\r\n    '1': 'b',\r\n    '2': 'c',\r\n    length: 3\r\n  };\r\n\r\n  // TypeError: Cannot spread non-iterable object.\r\n  let arr = [...arrayLike];\r\n  上面代码中，\r\n  arrayLike是一个类似数组的对象，\r\n  但是没有部署 Iterator 接口，\r\n  扩展运算符就会报错。这时，\r\n  可以改为使用Array.from方法将arrayLike转为真正的数组。\r\n\r\n  （6）Map 和 Set 结构，\r\n  Generator 函数\r\n\r\n  扩展运算符内部调用的是数据结构的 Iterator 接口，\r\n  因此只要具有 Iterator 接口的对象，\r\n  都可以使用扩展运算符，\r\n  比如 Map 结构。\r\n\r\n  let map = new Map([\r\n    [1, 'one'],\r\n    [2, 'two'],\r\n    [3, 'three'],\r\n  ]);\r\n\r\n  let arr = [...map.keys()]; // [1, 2, 3]\r\n  Generator 函数运行后，\r\n  返回一个遍历器对象，\r\n  因此也可以使用扩展运算符。\r\n\r\n  const go = function*(){\r\n    yield 1;\r\n    yield 2;\r\n    yield 3;\r\n  };\r\n\r\n  [...go()] // [1, 2, 3]\r\n  上面代码中，\r\n  变量go是一个 Generator 函数，\r\n  执行后返回的是一个遍历器对象，\r\n  对这个遍历器对象执行扩展运算符，\r\n  就会将内部遍历得到的值，\r\n  转为一个数组。\r\n\r\n  如果对没有 Iterator 接口的对象，\r\n  使用扩展运算符，\r\n  将会报错。\r\n\r\n  const obj = {a: 1, b: 2};\r\n  let arr = [...obj]; // TypeError: Cannot spread non-iterable object\r\n\r\n  ### Array.from()\r\n  Array.from方法用于将两类对象转为真正的数组：类似数组的对象（array-like object）和可遍历（iterable）的对象（包括 ES6 新增的数据结构 Set 和 Map）。\r\n\r\n  下面是一个类似数组的对象，\r\n  Array.from将它转为真正的数组。\r\n\r\n  let arrayLike = {\r\n      '0': 'a',\r\n      '1': 'b',\r\n      '2': 'c',\r\n      length: 3\r\n  };\r\n\r\n  // ES5的写法\r\n  var arr1 = [].slice.call(arrayLike); // ['a', 'b', 'c']\r\n\r\n  // ES6的写法\r\n  let arr2 = Array.from(arrayLike); // ['a', 'b', 'c']\r\n  实际应用中，\r\n  常见的类似数组的对象是 DOM 操作返回的 NodeList 集合，\r\n  以及函数内部的arguments对象。Array.from都可以将它们转为真正的数组。\r\n\r\n  // NodeList对象\r\n  let ps = document.querySelectorAll('p');\r\n  Array.from(ps).filter(p => {\r\n    return p.textContent.length > 100;\r\n  });\r\n\r\n  // arguments对象\r\n  function foo() {\r\n    var args = Array.from(arguments);\r\n    // ...\r\n  }\r\n  上面代码中，\r\n  querySelectorAll方法返回的是一个类似数组的对象，\r\n  可以将这个对象转为真正的数组，\r\n  再使用filter方法。\r\n\r\n  只要是部署了 Iterator 接口的数据结构，\r\n  Array.from都能将其转为数组。\r\n\r\n  Array.from('hello')\r\n  // ['h', 'e', 'l', 'l', 'o']\r\n\r\n  let namesSet = new Set(['a', 'b'])\r\n  Array.from(namesSet) // ['a', 'b']\r\n  上面代码中，\r\n  字符串和 Set 结构都具有 Iterator 接口，\r\n  因此可以被Array.from转为真正的数组。\r\n\r\n  如果参数是一个真正的数组，\r\n  Array.from会返回一个一模一样的新数组。\r\n\r\n  Array.from([1, 2, 3])\r\n  // [1, 2, 3]\r\n  值得提醒的是，\r\n  扩展运算符（...）也可以将某些数据结构转为数组。\r\n\r\n  // arguments对象\r\n  function foo() {\r\n    const args = [...arguments];\r\n  }\r\n\r\n  // NodeList对象\r\n  [...document.querySelectorAll('div')]\r\n  扩展运算符背后调用的是遍历器接口（Symbol.iterator），\r\n  如果一个对象没有部署这个接口，\r\n  就无法转换。Array.from方法还支持类似数组的对象。所谓类似数组的对象，\r\n  本质特征只有一点，\r\n  即必须有length属性。因此，\r\n  任何有length属性的对象，\r\n  都可以通过Array.from方法转为数组，\r\n  而此时扩展运算符就无法转换。\r\n\r\n  Array.from({ length: 3 });\r\n  // [ undefined, undefined, undefined ]\r\n  上面代码中，\r\n  Array.from返回了一个具有三个成员的数组，\r\n  每个位置的值都是undefined。扩展运算符转换不了这个对象。\r\n\r\n  对于还没有部署该方法的浏览器，\r\n  可以用Array.prototype.slice方法替代。\r\n\r\n  const toArray = (() =>\r\n    Array.from ? Array.from : obj => [].slice.call(obj)\r\n  )();\r\n  Array.from还可以接受第二个参数，\r\n  作用类似于数组的map方法，\r\n  用来对每个元素进行处理，\r\n  将处理后的值放入返回的数组。\r\n\r\n  Array.from(arrayLike, x => x * x);\r\n  // 等同于\r\n  Array.from(arrayLike).map(x => x * x);\r\n\r\n  Array.from([1, 2, 3], (x) => x * x)\r\n  // [1, 4, 9]\r\n  下面的例子是取出一组 DOM 节点的文本内容。\r\n\r\n  let spans = document.querySelectorAll('span.name');\r\n\r\n  // map()\r\n  let names1 = Array.prototype.map.call(spans, s => s.textContent);\r\n\r\n  // Array.from()\r\n  let names2 = Array.from(spans, s => s.textContent)\r\n  下面的例子将数组中布尔值为false的成员转为0。\r\n\r\n  Array.from([1, , 2, , 3], (n) => n || 0)\r\n  // [1, 0, 2, 0, 3]\r\n  另一个例子是返回各种数据的类型。\r\n\r\n  function typesOf () {\r\n    return Array.from(arguments, value => typeof value)\r\n  }\r\n  typesOf(null, [], NaN)\r\n  // ['object', 'object', 'number']\r\n  如果map函数里面用到了this关键字，\r\n  还可以传入Array.from的第三个参数，\r\n  用来绑定this。\r\n\r\n  Array.from()可以将各种值转为真正的数组，\r\n  并且还提供map功能。这实际上意味着，\r\n  只要有一个原始的数据结构，\r\n  你就可以先对它的值进行处理，\r\n  然后转成规范的数组结构，\r\n  进而就可以使用数量众多的数组方法。\r\n\r\n  Array.from({ length: 2 }, () => 'jack')\r\n  // ['jack', 'jack']\r\n  上面代码中，\r\n  Array.from的第一个参数指定了第二个参数运行的次数。这种特性可以让该方法的用法变得非常灵活。\r\n\r\n  Array.from()的另一个应用是，\r\n  将字符串转为数组，\r\n  然后返回字符串的长度。因为它能正确处理各种 Unicode 字符，\r\n  可以避免 JavaScript 将大于\\uFFFF的 Unicode 字符，\r\n  算作两个字符的 bug。\r\n\r\n  function countSymbols(string) {\r\n    return Array.from(string).length;\r\n  }\r\n\r\n  ### Array.of()\r\n  Array.of方法用于将一组值，\r\n  转换为数组。\r\n\r\n  Array.of(3, 11, 8) // [3,11,8]\r\n  Array.of(3) // [3]\r\n  Array.of(3).length // 1\r\n  这个方法的主要目的，\r\n  是弥补数组构造函数Array()的不足。因为参数个数的不同，\r\n  会导致Array()的行为有差异。\r\n\r\n  Array() // []\r\n  Array(3) // [, , ,]\r\n  Array(3, 11, 8) // [3, 11, 8]\r\n  上面代码中，\r\n  Array方法没有参数、一个参数、三个参数时，\r\n  返回结果都不一样。只有当参数个数不少于 2 个时，\r\n  Array()才会返回由参数组成的新数组。参数个数只有一个时，\r\n  实际上是指定数组的长度。\r\n\r\n  Array.of基本上可以用来替代Array()或new Array()，\r\n  并且不存在由于参数不同而导致的重载。它的行为非常统一。\r\n\r\n  Array.of() // []\r\n  Array.of(undefined) // [undefined]\r\n  Array.of(1) // [1]\r\n  Array.of(1, 2) // [1, 2]\r\n  Array.of总是返回参数值组成的数组。如果没有参数，\r\n  就返回一个空数组。\r\n\r\n  Array.of方法可以用下面的代码模拟实现。\r\n\r\n  function ArrayOf(){\r\n    return [].slice.call(arguments);\r\n  }\r\n\r\n  ### 数组实例的 copyWithin()\r\n  数组实例的copyWithin()方法，\r\n  在当前数组内部，\r\n  将指定位置的成员复制到其他位置（会覆盖原有成员），\r\n  然后返回当前数组。也就是说，\r\n  使用这个方法，\r\n  会修改当前数组。\r\n\r\n  Array.prototype.copyWithin(target, start = 0, end = this.length)\r\n  它接受三个参数。\r\n\r\n  target（必需）：从该位置开始替换数据。如果为负值，\r\n  表示倒数。\r\n  start（可选）：从该位置开始读取数据，\r\n  默认为 0。如果为负值，\r\n  表示从末尾开始计算。\r\n  end（可选）：到该位置前停止读取数据，\r\n  默认等于数组长度。如果为负值，\r\n  表示从末尾开始计算。\r\n  这三个参数都应该是数值，\r\n  如果不是，\r\n  会自动转为数值。\r\n\r\n  [1, 2, 3, 4, 5].copyWithin(0, 3)\r\n  // [4, 5, 3, 4, 5]\r\n  上面代码表示将从 3 号位直到数组结束的成员（4 和 5），\r\n  复制到从 0 号位开始的位置，\r\n  结果覆盖了原来的 1 和 2。\r\n\r\n  下面是更多例子。\r\n\r\n  // 将3号位复制到0号位\r\n  [1, 2, 3, 4, 5].copyWithin(0, 3, 4)\r\n  // [4, 2, 3, 4, 5]\r\n\r\n  // -2相当于3号位，\r\n  -1相当于4号位\r\n  [1, 2, 3, 4, 5].copyWithin(0, -2, -1)\r\n  // [4, 2, 3, 4, 5]\r\n\r\n  // 将3号位复制到0号位\r\n  [].copyWithin.call({length: 5, 3: 1}, 0, 3)\r\n  // {0: 1, 3: 1, length: 5}\r\n\r\n  // 将2号位到数组结束，\r\n  复制到0号位\r\n  let i32a = new Int32Array([1, 2, 3, 4, 5]);\r\n  i32a.copyWithin(0, 2);\r\n  // Int32Array [3, 4, 5, 4, 5]\r\n\r\n  // 对于没有部署 TypedArray 的 copyWithin 方法的平台\r\n  // 需要采用下面的写法\r\n  [].copyWithin.call(new Int32Array([1, 2, 3, 4, 5]), 0, 3, 4);\r\n  // Int32Array [4, 2, 3, 4, 5]\r\n\r\n  ### 数组实例的 find() 和 findIndex()\r\n  数组实例的find方法，\r\n  用于找出第一个符合条件的数组成员。它的参数是一个回调函数，\r\n  所有数组成员依次执行该回调函数，\r\n  直到找出第一个返回值为true的成员，\r\n  然后返回该成员。如果没有符合条件的成员，\r\n  则返回undefined。\r\n\r\n  [1, 4, -5, 10].find((n) => n < 0)\r\n  // -5\r\n  上面代码找出数组中第一个小于 0 的成员。\r\n\r\n  [1, 5, 10, 15].find(function(value, index, arr) {\r\n    return value > 9;\r\n  }) // 10\r\n  上面代码中，\r\n  find方法的回调函数可以接受三个参数，\r\n  依次为当前的值、当前的位置和原数组。\r\n\r\n  数组实例的findIndex方法的用法与find方法非常类似，\r\n  返回第一个符合条件的数组成员的位置，\r\n  如果所有成员都不符合条件，\r\n  则返回-1。\r\n\r\n  [1, 5, 10, 15].findIndex(function(value, index, arr) {\r\n    return value > 9;\r\n  }) // 2\r\n  这两个方法都可以接受第二个参数，\r\n  用来绑定回调函数的this对象。\r\n\r\n  function f(v){\r\n    return v > this.age;\r\n  }\r\n  let person = {name: 'John', age: 20};\r\n  [10, 12, 26, 15].find(f, person);    // 26\r\n  上面的代码中，\r\n  find函数接收了第二个参数person对象，\r\n  回调函数中的this对象指向person对象。\r\n\r\n  另外，\r\n  这两个方法都可以发现NaN，\r\n  弥补了数组的indexOf方法的不足。\r\n\r\n  [NaN].indexOf(NaN)\r\n  // -1\r\n\r\n  [NaN].findIndex(y => Object.is(NaN, y))\r\n  // 0\r\n  上面代码中，\r\n  indexOf方法无法识别数组的NaN成员，\r\n  但是findIndex方法可以借助Object.is方法做到。\r\n\r\n  ### 数组实例的 fill()\r\n  fill方法使用给定值，\r\n  填充一个数组。\r\n\r\n  ['a', 'b', 'c'].fill(7)\r\n  // [7, 7, 7]\r\n\r\n  new Array(3).fill(7)\r\n  // [7, 7, 7]\r\n  上面代码表明，\r\n  fill方法用于空数组的初始化非常方便。数组中已有的元素，\r\n  会被全部抹去。\r\n\r\n  fill方法还可以接受第二个和第三个参数，\r\n  用于指定填充的起始位置和结束位置。\r\n\r\n  ['a', 'b', 'c'].fill(7, 1, 2)\r\n  // ['a', 7, 'c']\r\n  上面代码表示，\r\n  fill方法从 1 号位开始，\r\n  向原数组填充 7，\r\n  到 2 号位之前结束。\r\n\r\n  注意，\r\n  如果填充的类型为对象，\r\n  那么被赋值的是同一个内存地址的对象，\r\n  而不是深拷贝对象。\r\n\r\n  let arr = new Array(3).fill({name: \"Mike\"});\r\n  arr[0].name = \"Ben\";\r\n  arr\r\n  // [{name: \"Ben\"}, {name: \"Ben\"}, {name: \"Ben\"}]\r\n\r\n  let arr = new Array(3).fill([]);\r\n  arr[0].push(5);\r\n  arr\r\n  // [[5], [5], [5]]\r\n\r\n  ### 数组实例的 entries()，keys() 和 values()\r\n  ES6 提供三个新的方法——entries()，\r\n  keys()和values()——用于遍历数组。它们都返回一个遍历器对象（详见《Iterator》一章），\r\n  可以用for...of循环进行遍历，\r\n  唯一的区别是keys()是对键名的遍历、values()是对键值的遍历，\r\n  entries()是对键值对的遍历。\r\n\r\n  for (let index of ['a', 'b'].keys()) {\r\n    console.log(index);\r\n  }\r\n  // 0\r\n  // 1\r\n\r\n  for (let elem of ['a', 'b'].values()) {\r\n    console.log(elem);\r\n  }\r\n  // 'a'\r\n  // 'b'\r\n\r\n  for (let [index, elem] of ['a', 'b'].entries()) {\r\n    console.log(index, elem);\r\n  }\r\n  // 0 \"a\"\r\n  // 1 \"b\"\r\n  如果不使用for...of循环，\r\n  可以手动调用遍历器对象的next方法，\r\n  进行遍历。\r\n\r\n  let letter = ['a', 'b', 'c'];\r\n  let entries = letter.entries();\r\n  console.log(entries.next().value); // [0, 'a']\r\n  console.log(entries.next().value); // [1, 'b']\r\n  console.log(entries.next().value); // [2, 'c']\r\n\r\n  ### 数组实例的 includes()\r\n  Array.prototype.includes方法返回一个布尔值，\r\n  表示某个数组是否包含给定的值，\r\n  与字符串的includes方法类似。ES2016 引入了该方法。\r\n\r\n  [1, 2, 3].includes(2)     // true\r\n  [1, 2, 3].includes(4)     // false\r\n  [1, 2, NaN].includes(NaN) // true\r\n  该方法的第二个参数表示搜索的起始位置，\r\n  默认为0。如果第二个参数为负数，\r\n  则表示倒数的位置，\r\n  如果这时它大于数组长度（比如第二个参数为-4，\r\n  但数组长度为3），\r\n  则会重置为从0开始。\r\n\r\n  [1, 2, 3].includes(3, 3);  // false\r\n  [1, 2, 3].includes(3, -1); // true\r\n  没有该方法之前，\r\n  我们通常使用数组的indexOf方法，\r\n  检查是否包含某个值。\r\n\r\n  if (arr.indexOf(el) !== -1) {\r\n    // ...\r\n  }\r\n  indexOf方法有两个缺点，\r\n  一是不够语义化，\r\n  它的含义是找到参数值的第一个出现位置，\r\n  所以要去比较是否不等于-1，\r\n  表达起来不够直观。二是，\r\n  它内部使用严格相等运算符（===）进行判断，\r\n  这会导致对NaN的误判。\r\n\r\n  [NaN].indexOf(NaN)\r\n  // -1\r\n  includes使用的是不一样的判断算法，\r\n  就没有这个问题。\r\n\r\n  [NaN].includes(NaN)\r\n  // true\r\n  下面代码用来检查当前环境是否支持该方法，\r\n  如果不支持，\r\n  部署一个简易的替代版本。\r\n\r\n  const contains = (() =>\r\n    Array.prototype.includes\r\n      ? (arr, value) => arr.includes(value)\r\n      : (arr, value) => arr.some(el => el === value)\r\n  )();\r\n  contains(['foo', 'bar'], 'baz'); // => false\r\n  另外，\r\n  Map 和 Set 数据结构有一个has方法，\r\n  需要注意与includes区分。\r\n\r\n  Map 结构的has方法，\r\n  是用来查找键名的，\r\n  比如Map.prototype.has(key)、WeakMap.prototype.has(key)、Reflect.has(target, propertyKey)。\r\n  Set 结构的has方法，\r\n  是用来查找值的，\r\n  比如Set.prototype.has(value)、WeakSet.prototype.has(value)。\r\n\r\n  ### 数组实例的 flat()，\r\n  flatMap()\r\n  数组的成员有时还是数组，\r\n  Array.prototype.flat()用于将嵌套的数组“拉平”，\r\n  变成一维的数组。该方法返回一个新数组，\r\n  对原数据没有影响。\r\n\r\n  [1, 2, [3, 4]].flat()\r\n  // [1, 2, 3, 4]\r\n  上面代码中，\r\n  原数组的成员里面有一个数组，\r\n  flat()方法将子数组的成员取出来，\r\n  添加在原来的位置。\r\n\r\n  flat()默认只会“拉平”一层，\r\n  如果想要“拉平”多层的嵌套数组，\r\n  可以将flat()方法的参数写成一个整数，\r\n  表示想要拉平的层数，\r\n  默认为1。\r\n\r\n  [1, 2, [3, [4, 5]]].flat()\r\n  // [1, 2, 3, [4, 5]]\r\n\r\n  [1, 2, [3, [4, 5]]].flat(2)\r\n  // [1, 2, 3, 4, 5]\r\n  上面代码中，\r\n  flat()的参数为2，\r\n  表示要“拉平”两层的嵌套数组。\r\n\r\n  如果不管有多少层嵌套，\r\n  都要转成一维数组，\r\n  可以用Infinity关键字作为参数。\r\n\r\n  [1, [2, [3]]].flat(Infinity)\r\n  // [1, 2, 3]\r\n  如果原数组有空位，\r\n  flat()方法会跳过空位。\r\n\r\n  [1, 2, , 4, 5].flat()\r\n  // [1, 2, 4, 5]\r\n  flatMap()方法对原数组的每个成员执行一个函数（相当于执行Array.prototype.map()），\r\n  然后对返回值组成的数组执行flat()方法。该方法返回一个新数组，\r\n  不改变原数组。\r\n\r\n  // 相当于 [[2, 4], [3, 6], [4, 8]].flat()\r\n  [2, 3, 4].flatMap((x) => [x, x * 2])\r\n  // [2, 4, 3, 6, 4, 8]\r\n  flatMap()只能展开一层数组。\r\n\r\n  // 相当于 [[[2]], [[4]], [[6]], [[8]]].flat()\r\n  [1, 2, 3, 4].flatMap(x => [[x * 2]])\r\n  // [[2], [4], [6], [8]]\r\n  上面代码中，\r\n  遍历函数返回的是一个双层的数组，\r\n  但是默认只能展开一层，\r\n  因此flatMap()返回的还是一个嵌套数组。\r\n\r\n  flatMap()方法的参数是一个遍历函数，\r\n  该函数可以接受三个参数，\r\n  分别是当前数组成员、当前数组成员的位置（从零开始）、原数组。\r\n\r\n  arr.flatMap(function callback(currentValue[, index[, array]]) {\r\n    // ...\r\n  }[, thisArg])\r\n  flatMap()方法还可以有第二个参数，\r\n  用来绑定遍历函数里面的this。\r\n\r\n  数组的空位\r\n  数组的空位指，\r\n  数组的某一个位置没有任何值。比如，\r\n  Array构造函数返回的数组都是空位。\r\n\r\n  Array(3) // [, , ,]\r\n  上面代码中，\r\n  Array(3)返回一个具有 3 个空位的数组。\r\n\r\n  注意，\r\n  空位不是undefined，\r\n  一个位置的值等于undefined，\r\n  依然是有值的。空位是没有任何值，\r\n  in运算符可以说明这一点。\r\n\r\n  0 in [undefined, undefined, undefined] // true\r\n  0 in [, , ,] // false\r\n  上面代码说明，\r\n  第一个数组的 0 号位置是有值的，\r\n  第二个数组的 0 号位置没有值。\r\n\r\n  ES5 对空位的处理，\r\n  已经很不一致了，\r\n  大多数情况下会忽略空位。\r\n\r\n  forEach(), filter(), reduce(), every() 和some()都会跳过空位。\r\n  map()会跳过空位，\r\n  但会保留这个值\r\n  join()和toString()会将空位视为undefined，\r\n  而undefined和null会被处理成空字符串。\r\n  // forEach方法\r\n  [,'a'].forEach((x,i) => console.log(i)); // 1\r\n\r\n  // filter方法\r\n  ['a',,'b'].filter(x => true) // ['a','b']\r\n\r\n  // every方法\r\n  [,'a'].every(x => x==='a') // true\r\n\r\n  // reduce方法\r\n  [1,,2].reduce((x,y) => x+y) // 3\r\n\r\n  // some方法\r\n  [,'a'].some(x => x !== 'a') // false\r\n\r\n  // map方法\r\n  [,'a'].map(x => 1) // [,1]\r\n\r\n  // join方法\r\n  [,'a',undefined,null].join('#') // \"#a##\"\r\n\r\n  // toString方法\r\n  [,'a',undefined,null].toString() // \",a,,\"\r\n  ES6 则是明确将空位转为undefined。\r\n\r\n  Array.from方法会将数组的空位，\r\n  转为undefined，\r\n  也就是说，\r\n  这个方法不会忽略空位。\r\n\r\n  Array.from(['a',,'b'])\r\n  // [ \"a\", undefined, \"b\" ]\r\n  扩展运算符（...）也会将空位转为undefined。\r\n\r\n  [...['a',,'b']]\r\n  // [ \"a\", undefined, \"b\" ]\r\n  copyWithin()会连空位一起拷贝。\r\n\r\n  [,'a','b',,].copyWithin(2,0) // [,\"a\",,\"a\"]\r\n  fill()会将空位视为正常的数组位置。\r\n\r\n  new Array(3).fill('a') // [\"a\",\"a\",\"a\"]\r\n  for...of循环也会遍历空位。\r\n\r\n  let arr = [, ,];\r\n  for (let i of arr) {\r\n    console.log(1);\r\n  }\r\n  // 1\r\n  // 1\r\n  上面代码中，\r\n  数组arr有两个空位，\r\n  for...of并没有忽略它们。如果改成map方法遍历，\r\n  空位是会跳过的。\r\n\r\n  entries()、keys()、values()、find()和findIndex()会将空位处理成undefined。\r\n\r\n  // entries()\r\n  [...[,'a'].entries()] // [[0,undefined], [1,\"a\"]]\r\n\r\n  // keys()\r\n  [...[,'a'].keys()] // [0,1]\r\n\r\n  // values()\r\n  [...[,'a'].values()] // [undefined,\"a\"]\r\n\r\n  // find()\r\n  [,'a'].find(x => true) // undefined\r\n\r\n  // findIndex()\r\n  [,'a'].findIndex(x => true) // 0\r\n  由于空位的处理规则非常不统一，\r\n  所以建议避免出现空位。\r\n\r\n  ### Array.prototype.sort() 的排序稳定性\r\n  排序稳定性（stable sorting）是排序算法的重要属性，\r\n  指的是排序关键字相同的项目，\r\n  排序前后的顺序不变。\r\n\r\n  const arr = [\r\n    'peach',\r\n    'straw',\r\n    'apple',\r\n    'spork'\r\n  ];\r\n\r\n  const stableSorting = (s1, s2) => {\r\n    if (s1[0] < s2[0]) return -1;\r\n    return 1;\r\n  };\r\n\r\n  arr.sort(stableSorting)\r\n  // [\"apple\", \"peach\", \"straw\", \"spork\"]\r\n  上面代码对数组arr按照首字母进行排序。排序结果中，\r\n  straw在spork的前面，\r\n  跟原始顺序一致，\r\n  所以排序算法stableSorting是稳定排序。\r\n\r\n  const unstableSorting = (s1, s2) => {\r\n    if (s1[0] <= s2[0]) return -1;\r\n    return 1;\r\n  };\r\n\r\n  arr.sort(unstableSorting)\r\n  // [\"apple\", \"peach\", \"spork\", \"straw\"]\r\n  上面代码中，\r\n  排序结果是spork在straw前面，\r\n  跟原始顺序相反，\r\n  所以排序算法unstableSorting是不稳定的。\r\n\r\n  常见的排序算法之中，\r\n  插入排序、合并排序、冒泡排序等都是稳定的，\r\n  堆排序、快速排序等是不稳定的。不稳定排序的主要缺点是，\r\n  多重排序时可能会产生问题。假设有一个姓和名的列表，\r\n  要求按照“姓氏为主要关键字，\r\n  名字为次要关键字”进行排序。开发者可能会先按名字排序，\r\n  再按姓氏进行排序。如果排序算法是稳定的，\r\n  这样就可以达到“先姓氏，\r\n  后名字”的排序效果。如果是不稳定的，\r\n  就不行。\r\n\r\n  早先的 ECMAScript 没有规定，\r\n  Array.prototype.sort()的默认排序算法是否稳定，\r\n  留给浏览器自己决定，\r\n  这导致某些实现是不稳定的。ES2019 明确规定，\r\n  Array.prototype.sort()的默认排序算法必须稳定。这个规定已经做到了，\r\n  现在 JavaScript 各个主要实现的默认排序算法都是稳定的。\r\n")]),e("pre",[r._v("\r\n对象的扩展\r\n  对象（object）是 JavaScript 最重要的数据结构。ES6 对它进行了重大升级，\r\n  本章介绍数据结构本身的改变，\r\n  下一章介绍Object对象的新增方法。\r\n\r\n  ## 属性的简洁表示法\r\n  ES6 允许在大括号里面，\r\n  直接写入变量和函数，\r\n  作为对象的属性和方法。这样的书写更加简洁。\r\n\r\n  const foo = 'bar';\r\n  const baz = {foo};\r\n  baz // {foo: \"bar\"}\r\n\r\n  // 等同于\r\n  const baz = {foo: foo};\r\n  上面代码中，\r\n  变量foo直接写在大括号里面。这时，\r\n  属性名就是变量名, 属性值就是变量值。下面是另一个例子。\r\n\r\n  function f(x, y) {\r\n    return {x, y};\r\n  }\r\n\r\n  // 等同于\r\n\r\n  function f(x, y) {\r\n    return {x: x, y: y};\r\n  }\r\n\r\n  f(1, 2) // Object {x: 1, y: 2}\r\n  除了属性简写，\r\n  方法也可以简写。\r\n\r\n  const o = {\r\n    method() {\r\n      return \"Hello!\";\r\n    }\r\n  };\r\n\r\n  // 等同于\r\n\r\n  const o = {\r\n    method: function() {\r\n      return \"Hello!\";\r\n    }\r\n  };\r\n  下面是一个实际的例子。\r\n\r\n  let birth = '2000/01/01';\r\n\r\n  const Person = {\r\n\r\n    name: '张三',\r\n\r\n    //等同于birth: birth\r\n    birth,\r\n\r\n    // 等同于hello: function ()...\r\n    hello() { console.log('我的名字是', this.name); }\r\n\r\n  };\r\n  这种写法用于函数的返回值，\r\n  将会非常方便。\r\n\r\n  function getPoint() {\r\n    const x = 1;\r\n    const y = 10;\r\n    return {x, y};\r\n  }\r\n\r\n  getPoint()\r\n  // {x:1, y:10}\r\n  CommonJS 模块输出一组变量，\r\n  就非常合适使用简洁写法。\r\n\r\n  let ms = {};\r\n\r\n  function getItem (key) {\r\n    return key in ms ? ms[key] : null;\r\n  }\r\n\r\n  function setItem (key, value) {\r\n    ms[key] = value;\r\n  }\r\n\r\n  function clear () {\r\n    ms = {};\r\n  }\r\n\r\n  module.exports = { getItem, setItem, clear };\r\n  // 等同于\r\n  module.exports = {\r\n    getItem: getItem,\r\n    setItem: setItem,\r\n    clear: clear\r\n  };\r\n  属性的赋值器（setter）和取值器（getter），\r\n  事实上也是采用这种写法。\r\n\r\n  const cart = {\r\n    _wheels: 4,\r\n\r\n    get wheels () {\r\n      return this._wheels;\r\n    },\r\n\r\n    set wheels (value) {\r\n      if (value < this._wheels) {\r\n        throw new Error('数值太小了！');\r\n      }\r\n      this._wheels = value;\r\n    }\r\n  }\r\n  简洁写法在打印对象时也很有用。\r\n\r\n  let user = {\r\n    name: 'test'\r\n  };\r\n\r\n  let foo = {\r\n    bar: 'baz'\r\n  };\r\n\r\n  console.log(user, foo)\r\n  // {name: \"test\"} {bar: \"baz\"}\r\n  console.log({user, foo})\r\n  // {user: {name: \"test\"}, foo: {bar: \"baz\"}}\r\n  上面代码中，\r\n  console.log直接输出user和foo两个对象时，\r\n  就是两组键值对，\r\n  可能会混淆。把它们放在大括号里面输出，\r\n  就变成了对象的简洁表示法，\r\n  每组键值对前面会打印对象名，\r\n  这样就比较清晰了。\r\n\r\n  注意，\r\n  简写的对象方法不能用作构造函数，\r\n  会报错。\r\n\r\n  const obj = {\r\n    f() {\r\n      this.foo = 'bar';\r\n    }\r\n  };\r\n\r\n  new obj.f() // 报错\r\n  上面代码中，\r\n  f是一个简写的对象方法，\r\n  所以obj.f不能当作构造函数使用。\r\n\r\n  ## 属性名表达式\r\n  JavaScript 定义对象的属性，\r\n  有两种方法。\r\n\r\n  // 方法一\r\n  obj.foo = true;\r\n\r\n  // 方法二\r\n  obj['a' + 'bc'] = 123;\r\n  上面代码的方法一是直接用标识符作为属性名，\r\n  方法二是用表达式作为属性名，\r\n  这时要将表达式放在方括号之内。\r\n\r\n  但是，\r\n  如果使用字面量方式定义对象（使用大括号），\r\n  在 ES5 中只能使用方法一（标识符）定义属性。\r\n\r\n  var obj = {\r\n    foo: true,\r\n    abc: 123\r\n  };\r\n  ES6 允许字面量定义对象时，\r\n  用方法二（表达式）作为对象的属性名，\r\n  即把表达式放在方括号内。\r\n\r\n  let propKey = 'foo';\r\n\r\n  let obj = {\r\n    [propKey]: true,\r\n    ['a' + 'bc']: 123\r\n  };\r\n  下面是另一个例子。\r\n\r\n  let lastWord = 'last word';\r\n\r\n  const a = {\r\n    'first word': 'hello',\r\n    [lastWord]: 'world'\r\n  };\r\n\r\n  a['first word'] // \"hello\"\r\n  a[lastWord] // \"world\"\r\n  a['last word'] // \"world\"\r\n  表达式还可以用于定义方法名。\r\n\r\n  let obj = {\r\n    ['h' + 'ello']() {\r\n      return 'hi';\r\n    }\r\n  };\r\n\r\n  obj.hello() // hi\r\n  注意，\r\n  属性名表达式与简洁表示法，\r\n  不能同时使用，\r\n  会报错。\r\n\r\n  // 报错\r\n  const foo = 'bar';\r\n  const bar = 'abc';\r\n  const baz = { [foo] };\r\n\r\n  // 正确\r\n  const foo = 'bar';\r\n  const baz = { [foo]: 'abc'};\r\n  注意，\r\n  属性名表达式如果是一个对象，\r\n  默认情况下会自动将对象转为字符串[object Object]，\r\n  这一点要特别小心。\r\n\r\n  const keyA = {a: 1};\r\n  const keyB = {b: 2};\r\n\r\n  const myObject = {\r\n    [keyA]: 'valueA',\r\n    [keyB]: 'valueB'\r\n  };\r\n\r\n  myObject // Object {[object Object]: \"valueB\"}\r\n  上面代码中，\r\n  [keyA]和[keyB]得到的都是[object Object]，\r\n  所以[keyB]会把[keyA]覆盖掉，\r\n  而myObject最后只有一个[object Object]属性。\r\n\r\n  ## 方法的 name 属性\r\n  函数的name属性，\r\n  返回函数名。对象方法也是函数，\r\n  因此也有name属性。\r\n\r\n  const person = {\r\n    sayName() {\r\n      console.log('hello!');\r\n    },\r\n  };\r\n\r\n  person.sayName.name   // \"sayName\"\r\n  上面代码中，\r\n  方法的name属性返回函数名（即方法名）。\r\n\r\n  如果对象的方法使用了取值函数（getter）和存值函数（setter），\r\n  则name属性不是在该方法上面，\r\n  而是该方法的属性的描述对象的get和set属性上面，\r\n  返回值是方法名前加上get和set。\r\n\r\n  const obj = {\r\n    get foo() {},\r\n    set foo(x) {}\r\n  };\r\n\r\n  obj.foo.name\r\n  // TypeError: Cannot read property 'name' of undefined\r\n\r\n  const descriptor = Object.getOwnPropertyDescriptor(obj, 'foo');\r\n\r\n  descriptor.get.name // \"get foo\"\r\n  descriptor.set.name // \"set foo\"\r\n  有两种特殊情况：bind方法创造的函数，\r\n  name属性返回bound加上原函数的名字；Function构造函数创造的函数，\r\n  name属性返回anonymous。\r\n\r\n  (new Function()).name // \"anonymous\"\r\n\r\n  var doSomething = function() {\r\n    // ...\r\n  };\r\n  doSomething.bind().name // \"bound doSomething\"\r\n  如果对象的方法是一个 Symbol 值，\r\n  那么name属性返回的是这个 Symbol 值的描述。\r\n\r\n  const key1 = Symbol('description');\r\n  const key2 = Symbol();\r\n  let obj = {\r\n    [key1]() {},\r\n    [key2]() {},\r\n  };\r\n  obj[key1].name // \"[description]\"\r\n  obj[key2].name // \"\"\r\n  上面代码中，\r\n  key1对应的 Symbol 值有描述，\r\n  key2没有。\r\n\r\n  ## 属性的可枚举性和遍历\r\n  **1**\r\n  可枚举性\r\n  对象的每个属性都有一个描述对象（Descriptor），\r\n  用来控制该属性的行为。Object.getOwnPropertyDescriptor方法可以获取该属性的描述对象。\r\n\r\n  let obj = { foo: 123 };\r\n  Object.getOwnPropertyDescriptor(obj, 'foo')\r\n  //  {\r\n  //    value: 123,\r\n  //    writable: true,\r\n  //    enumerable: true,\r\n  //    configurable: true\r\n  //  }\r\n  描述对象的enumerable属性，\r\n  称为“可枚举性”，\r\n  如果该属性为false，\r\n  就表示某些操作会忽略当前属性。\r\n\r\n  目前，\r\n  有四个操作会忽略enumerable为false的属性。\r\n\r\n  for...in循环：只遍历对象自身的和继承的可枚举的属性。\r\n  Object.keys()：返回对象自身的所有可枚举的属性的键名。\r\n  JSON.stringify()：只串行化对象自身的可枚举的属性。\r\n  Object.assign()： 忽略enumerable为false的属性，\r\n  只拷贝对象自身的可枚举的属性。\r\n  这四个操作之中，\r\n  前三个是 ES5 就有的，\r\n  最后一个Object.assign()是 ES6 新增的。其中，\r\n  只有for...in会返回继承的属性，\r\n  其他三个方法都会忽略继承的属性，\r\n  只处理对象自身的属性。实际上，\r\n  引入“可枚举”（enumerable）这个概念的最初目的，\r\n  就是让某些属性可以规避掉for...in操作，\r\n  不然所有内部属性和方法都会被遍历到。比如，\r\n  对象原型的toString方法，\r\n  以及数组的length属性，\r\n  就通过“可枚举性”，\r\n  从而避免被for...in遍历到。\r\n\r\n  Object.getOwnPropertyDescriptor(Object.prototype, 'toString').enumerable\r\n  // false\r\n\r\n  Object.getOwnPropertyDescriptor([], 'length').enumerable\r\n  // false\r\n  上面代码中，\r\n  toString和length属性的enumerable都是false，\r\n  因此for...in不会遍历到这两个继承自原型的属性。\r\n\r\n  另外，\r\n  ES6 规定，\r\n  所有 Class 的原型的方法都是不可枚举的。\r\n\r\n  Object.getOwnPropertyDescriptor(class {foo() {}}.prototype, 'foo').enumerable\r\n  // false\r\n  总的来说，\r\n  操作中引入继承的属性会让问题复杂化，\r\n  大多数时候，\r\n  我们只关心对象自身的属性。所以，\r\n  尽量不要用for...in循环，\r\n  而用Object.keys()代替。\r\n\r\n  **2**\r\n  属性的遍历\r\n  ES6 一共有 5 种方法可以遍历对象的属性。\r\n\r\n  （1）for...in\r\n\r\n  for...in循环遍历对象自身的和继承的可枚举属性（不含 Symbol 属性）。\r\n\r\n  （2）Object.keys(obj)\r\n\r\n  Object.keys返回一个数组，\r\n  包括对象自身的（不含继承的）所有可枚举属性（不含 Symbol 属性）的键名。\r\n\r\n  （3）Object.getOwnPropertyNames(obj)\r\n\r\n  Object.getOwnPropertyNames返回一个数组，\r\n  包含对象自身的所有属性（不含 Symbol 属性，\r\n  但是包括不可枚举属性）的键名。\r\n\r\n  （4）Object.getOwnPropertySymbols(obj)\r\n\r\n  Object.getOwnPropertySymbols返回一个数组，\r\n  包含对象自身的所有 Symbol 属性的键名。\r\n\r\n  （5）Reflect.ownKeys(obj)\r\n\r\n  Reflect.ownKeys返回一个数组，\r\n  包含对象自身的（不含继承的）所有键名，\r\n  不管键名是 Symbol 或字符串，\r\n  也不管是否可枚举。\r\n\r\n  以上的 5 种方法遍历对象的键名，\r\n  都遵守同样的属性遍历的次序规则。\r\n\r\n  首先遍历所有数值键，\r\n  按照数值升序排列。\r\n  其次遍历所有字符串键，\r\n  按照加入时间升序排列。\r\n  最后遍历所有 Symbol 键，\r\n  按照加入时间升序排列。\r\n  Reflect.ownKeys({ [Symbol()]:0, b:0, 10:0, 2:0, a:0 })\r\n  // ['2', '10', 'b', 'a', Symbol()]\r\n  上面代码中，\r\n  Reflect.ownKeys方法返回一个数组，\r\n  包含了参数对象的所有属性。这个数组的属性次序是这样的，\r\n  首先是数值属性2和10，\r\n  其次是字符串属性b和a，\r\n  最后是 Symbol 属性。\r\n\r\n  ## super 关键字\r\n  我们知道，\r\n  this关键字总是指向函数所在的当前对象，\r\n  ES6 又新增了另一个类似的关键字super，\r\n  指向当前对象的原型对象。\r\n\r\n  const proto = {\r\n    foo: 'hello'\r\n  };\r\n\r\n  const obj = {\r\n    foo: 'world',\r\n    find() {\r\n      return super.foo;\r\n    }\r\n  };\r\n\r\n  Object.setPrototypeOf(obj, proto);\r\n  obj.find() // \"hello\"\r\n  上面代码中，\r\n  对象obj.find()方法之中，\r\n  通过super.foo引用了原型对象proto的foo属性。\r\n\r\n  注意，\r\n  super关键字表示原型对象时，\r\n  只能用在对象的方法之中，\r\n  用在其他地方都会报错。\r\n\r\n  // 报错\r\n  const obj = {\r\n    foo: super.foo\r\n  }\r\n\r\n  // 报错\r\n  const obj = {\r\n    foo: () => super.foo\r\n  }\r\n\r\n  // 报错\r\n  const obj = {\r\n    foo: function () {\r\n      return super.foo\r\n    }\r\n  }\r\n  上面三种super的用法都会报错，\r\n  因为对于 JavaScript 引擎来说，\r\n  这里的super都没有用在对象的方法之中。第一种写法是super用在属性里面，\r\n  第二种和第三种写法是super用在一个函数里面，\r\n  然后赋值给foo属性。目前，\r\n  只有对象方法的简写法可以让 JavaScript 引擎确认，\r\n  定义的是对象的方法。\r\n\r\n  JavaScript 引擎内部，\r\n  super.foo等同于Object.getPrototypeOf(this).foo（属性）或Object.getPrototypeOf(this).foo.call(this)（方法）。\r\n\r\n  const proto = {\r\n    x: 'hello',\r\n    foo() {\r\n      console.log(this.x);\r\n    },\r\n  };\r\n\r\n  const obj = {\r\n    x: 'world',\r\n    foo() {\r\n      super.foo();\r\n    }\r\n  }\r\n\r\n  Object.setPrototypeOf(obj, proto);\r\n\r\n  obj.foo() // \"world\"\r\n  上面代码中，\r\n  super.foo指向原型对象proto的foo方法，\r\n  但是绑定的this却还是当前对象obj，\r\n  因此输出的就是world。\r\n\r\n  ## 对象的扩展运算符\r\n  《数组的扩展》一章中，\r\n  已经介绍过扩展运算符（...）。ES2018 将这个运算符引入了对象。\r\n\r\n  **1**\r\n  解构赋值\r\n  对象的解构赋值用于从一个对象取值，\r\n  相当于将目标对象自身的所有可遍历的（enumerable）、但尚未被读取的属性，\r\n  分配到指定的对象上面。所有的键和它们的值，\r\n  都会拷贝到新对象上面。\r\n\r\n  let { x, y, ...z } = { x: 1, y: 2, a: 3, b: 4 };\r\n  x // 1\r\n  y // 2\r\n  z // { a: 3, b: 4 }\r\n  上面代码中，\r\n  变量z是解构赋值所在的对象。它获取等号右边的所有尚未读取的键（a和b），\r\n  将它们连同值一起拷贝过来。\r\n\r\n  由于解构赋值要求等号右边是一个对象，\r\n  所以如果等号右边是undefined或null，\r\n  就会报错，\r\n  因为它们无法转为对象。\r\n\r\n  let { ...z } = null; // 运行时错误\r\n  let { ...z } = undefined; // 运行时错误\r\n  解构赋值必须是最后一个参数，\r\n  否则会报错。\r\n\r\n  let { ...x, y, z } = someObject; // 句法错误\r\n  let { x, ...y, ...z } = someObject; // 句法错误\r\n  上面代码中，\r\n  解构赋值不是最后一个参数，\r\n  所以会报错。\r\n\r\n  注意，\r\n  解构赋值的拷贝是浅拷贝，\r\n  即如果一个键的值是复合类型的值（数组、对象、函数）、那么解构赋值拷贝的是这个值的引用，\r\n  而不是这个值的副本。\r\n\r\n  let obj = { a: { b: 1 } };\r\n  let { ...x } = obj;\r\n  obj.a.b = 2;\r\n  x.a.b // 2\r\n  上面代码中，\r\n  x是解构赋值所在的对象，\r\n  拷贝了对象obj的a属性。a属性引用了一个对象，\r\n  修改这个对象的值，\r\n  会影响到解构赋值对它的引用。\r\n\r\n  另外，\r\n  扩展运算符的解构赋值，\r\n  不能复制继承自原型对象的属性。\r\n\r\n  let o1 = { a: 1 };\r\n  let o2 = { b: 2 };\r\n  o2.__proto__ = o1;\r\n  let { ...o3 } = o2;\r\n  o3 // { b: 2 }\r\n  o3.a // undefined\r\n  上面代码中，\r\n  对象o3复制了o2，\r\n  但是只复制了o2自身的属性，\r\n  没有复制它的原型对象o1的属性。\r\n\r\n  下面是另一个例子。\r\n\r\n  const o = Object.create({ x: 1, y: 2 });\r\n  o.z = 3;\r\n\r\n  let { x, ...newObj } = o;\r\n  let { y, z } = newObj;\r\n  x // 1\r\n  y // undefined\r\n  z // 3\r\n  上面代码中，\r\n  变量x是单纯的解构赋值，\r\n  所以可以读取对象o继承的属性；变量y和z是扩展运算符的解构赋值，\r\n  只能读取对象o自身的属性，\r\n  所以变量z可以赋值成功，\r\n  变量y取不到值。ES6 规定，\r\n  变量声明语句之中，\r\n  如果使用解构赋值，\r\n  扩展运算符后面必须是一个变量名，\r\n  而不能是一个解构赋值表达式，\r\n  所以上面代码引入了中间变量newObj，\r\n  如果写成下面这样会报错。\r\n\r\n  let { x, ...{ y, z } } = o;\r\n  // SyntaxError: ... must be followed by an identifier in declaration contexts\r\n  解构赋值的一个用处，\r\n  是扩展某个函数的参数，\r\n  引入其他操作。\r\n\r\n  function baseFunction({ a, b }) {\r\n    // ...\r\n  }\r\n  function wrapperFunction({ x, y, ...restConfig }) {\r\n    // 使用 x 和 y 参数进行操作\r\n    // 其余参数传给原始函数\r\n    return baseFunction(restConfig);\r\n  }\r\n  上面代码中，\r\n  原始函数baseFunction接受a和b作为参数，\r\n  函数wrapperFunction在baseFunction的基础上进行了扩展，\r\n  能够接受多余的参数，\r\n  并且保留原始函数的行为。\r\n\r\n  **2**\r\n  扩展运算符\r\n  对象的扩展运算符（...）用于取出参数对象的所有可遍历属性，\r\n  拷贝到当前对象之中。\r\n\r\n  let z = { a: 3, b: 4 };\r\n  let n = { ...z };\r\n  n // { a: 3, b: 4 }\r\n  由于数组是特殊的对象，\r\n  所以对象的扩展运算符也可以用于数组。\r\n\r\n  let foo = { ...['a', 'b', 'c'] };\r\n  foo\r\n  // {0: \"a\", 1: \"b\", 2: \"c\"}\r\n  如果扩展运算符后面是一个空对象，\r\n  则没有任何效果。\r\n\r\n  {...{}, a: 1}\r\n  // { a: 1 }\r\n  如果扩展运算符后面不是对象，\r\n  则会自动将其转为对象。\r\n\r\n  // 等同于 {...Object(1)}\r\n  {...1} // {}\r\n  上面代码中，\r\n  扩展运算符后面是整数1，\r\n  会自动转为数值的包装对象Number{1}。由于该对象没有自身属性，\r\n  所以返回一个空对象。\r\n\r\n  下面的例子都是类似的道理。\r\n\r\n  // 等同于 {...Object(true)}\r\n  {...true} // {}\r\n\r\n  // 等同于 {...Object(undefined)}\r\n  {...undefined} // {}\r\n\r\n  // 等同于 {...Object(null)}\r\n  {...null} // {}\r\n  但是，\r\n  如果扩展运算符后面是字符串，\r\n  它会自动转成一个类似数组的对象，\r\n  因此返回的不是空对象。\r\n\r\n  {...'hello'}\r\n  // {0: \"h\", 1: \"e\", 2: \"l\", 3: \"l\", 4: \"o\"}\r\n  对象的扩展运算符等同于使用Object.assign()方法。\r\n\r\n  let aClone = { ...a };\r\n  // 等同于\r\n  let aClone = Object.assign({}, a);\r\n  上面的例子只是拷贝了对象实例的属性，\r\n  如果想完整克隆一个对象，\r\n  还拷贝对象原型的属性，\r\n  可以采用下面的写法。\r\n\r\n  // 写法一\r\n  const clone1 = {\r\n    __proto__: Object.getPrototypeOf(obj),\r\n    ...obj\r\n  };\r\n\r\n  // 写法二\r\n  const clone2 = Object.assign(\r\n    Object.create(Object.getPrototypeOf(obj)),\r\n    obj\r\n  );\r\n\r\n  // 写法三\r\n  const clone3 = Object.create(\r\n    Object.getPrototypeOf(obj),\r\n    Object.getOwnPropertyDescriptors(obj)\r\n  )\r\n  上面代码中，\r\n  写法一的__proto__属性在非浏览器的环境不一定部署，\r\n  因此推荐使用写法二和写法三。\r\n\r\n  扩展运算符可以用于合并两个对象。\r\n\r\n  let ab = { ...a, ...b };\r\n  // 等同于\r\n  let ab = Object.assign({}, a, b);\r\n  如果用户自定义的属性，\r\n  放在扩展运算符后面，\r\n  则扩展运算符内部的同名属性会被覆盖掉。\r\n\r\n  let aWithOverrides = { ...a, x: 1, y: 2 };\r\n  // 等同于\r\n  let aWithOverrides = { ...a, ...{ x: 1, y: 2 } };\r\n  // 等同于\r\n  let x = 1, y = 2, aWithOverrides = { ...a, x, y };\r\n  // 等同于\r\n  let aWithOverrides = Object.assign({}, a, { x: 1, y: 2 });\r\n  上面代码中，\r\n  a对象的x属性和y属性，\r\n  拷贝到新对象后会被覆盖掉。\r\n\r\n  这用来修改现有对象部分的属性就很方便了。\r\n\r\n  let newVersion = {\r\n    ...previousVersion,\r\n    name: 'New Name' // Override the name property\r\n  };\r\n  上面代码中，\r\n  newVersion对象自定义了name属性，\r\n  其他属性全部复制自previousVersion对象。\r\n\r\n  如果把自定义属性放在扩展运算符前面，\r\n  就变成了设置新对象的默认属性值。\r\n\r\n  let aWithDefaults = { x: 1, y: 2, ...a };\r\n  // 等同于\r\n  let aWithDefaults = Object.assign({}, { x: 1, y: 2 }, a);\r\n  // 等同于\r\n  let aWithDefaults = Object.assign({ x: 1, y: 2 }, a);\r\n  与数组的扩展运算符一样，\r\n  对象的扩展运算符后面可以跟表达式。\r\n\r\n  const obj = {\r\n    ...(x > 1 ? {a: 1} : {}),\r\n    b: 2,\r\n  };\r\n  扩展运算符的参数对象之中，\r\n  如果有取值函数get，\r\n  这个函数是会执行的。\r\n\r\n  let a = {\r\n    get x() {\r\n      throw new Error('not throw yet');\r\n    }\r\n  }\r\n\r\n  let aWithXGetter = { ...a }; // 报错\r\n  上面例子中，\r\n  取值函数get在扩展a对象时会自动执行，\r\n  导致报错。\r\n\r\n  ## 链判断运算符\r\n  编程实务中，\r\n  如果读取对象内部的某个属性，\r\n  往往需要判断一下该对象是否存在。比如，\r\n  要读取message.body.user.firstName，\r\n  安全的写法是写成下面这样。\r\n\r\n  const firstName = (message\r\n    && message.body\r\n    && message.body.user\r\n    && message.body.user.firstName) || 'default';\r\n  或者使用三元运算符?:，\r\n  判断一个对象是否存在。\r\n\r\n  const fooInput = myForm.querySelector('input[name=foo]')\r\n  const fooValue = fooInput ? fooInput.value : undefined\r\n  这样的层层判断非常麻烦，\r\n  因此 ES2020 引入了“链判断运算符”（optional chaining operator）?.，\r\n  简化上面的写法。\r\n\r\n  const firstName = message?.body?.user?.firstName || 'default';\r\n  const fooValue = myForm.querySelector('input[name=foo]')?.value\r\n  上面代码使用了?.运算符，\r\n  直接在链式调用的时候判断，\r\n  左侧的对象是否为null或undefined。如果是的，\r\n  就不再往下运算，\r\n  而是返回undefined。\r\n\r\n  链判断运算符有三种用法。\r\n\r\n  obj?.prop // 对象属性\r\n  obj?.[expr] // 同上\r\n  func?.(...args) // 函数或对象方法的调用\r\n  下面是判断对象方法是否存在，\r\n  如果存在就立即执行的例子。\r\n\r\n  iterator.return?.()\r\n  上面代码中，\r\n  iterator.return如果有定义，\r\n  就会调用该方法，\r\n  否则直接返回undefined。\r\n\r\n  对于那些可能没有实现的方法，\r\n  这个运算符尤其有用。\r\n\r\n  if (myForm.checkValidity?.() === false) {\r\n    // 表单校验失败\r\n    return;\r\n  }\r\n  上面代码中，\r\n  老式浏览器的表单可能没有checkValidity这个方法，\r\n  这时?.运算符就会返回undefined，\r\n  判断语句就变成了undefined === false，\r\n  所以就会跳过下面的代码。\r\n\r\n  下面是这个运算符常见的使用形式，\r\n  以及不使用该运算符时的等价形式。\r\n\r\n  a?.b\r\n  // 等同于\r\n  a == null ? undefined : a.b\r\n\r\n  a?.[x]\r\n  // 等同于\r\n  a == null ? undefined : a[x]\r\n\r\n  a?.b()\r\n  // 等同于\r\n  a == null ? undefined : a.b()\r\n\r\n  a?.()\r\n  // 等同于\r\n  a == null ? undefined : a()\r\n  上面代码中，\r\n  特别注意后两种形式，\r\n  如果a?.b()里面的a.b不是函数，\r\n  不可调用，\r\n  那么a?.b()是会报错的。a?.()也是如此，\r\n  如果a不是null或undefined，\r\n  但也不是函数，\r\n  那么a?.()会报错。\r\n\r\n  使用这个运算符，\r\n  有几个注意点。\r\n\r\n  （1）短路机制\r\n\r\n  a?.[++x]\r\n  // 等同于\r\n  a == null ? undefined : a[++x]\r\n  上面代码中，\r\n  如果a是undefined或null，\r\n  那么x不会进行递增运算。也就是说，\r\n  链判断运算符一旦为真，\r\n  右侧的表达式就不再求值。\r\n\r\n  （2）delete 运算符\r\n\r\n  delete a?.b\r\n  // 等同于\r\n  a == null ? undefined : delete a.b\r\n  上面代码中，\r\n  如果a是undefined或null，\r\n  会直接返回undefined，\r\n  而不会进行delete运算。\r\n\r\n  （3）括号的影响\r\n\r\n  如果属性链有圆括号，\r\n  链判断运算符对圆括号外部没有影响，\r\n  只对圆括号内部有影响。\r\n\r\n  (a?.b).c\r\n  // 等价于\r\n  (a == null ? undefined : a.b).c\r\n  上面代码中，\r\n  ?.对圆括号外部没有影响，\r\n  不管a对象是否存在，\r\n  圆括号后面的.c总是会执行。\r\n\r\n  一般来说，\r\n  使用?.运算符的场合，\r\n  不应该使用圆括号。\r\n\r\n  （4）报错场合\r\n\r\n  以下写法是禁止的，\r\n  会报错。\r\n\r\n  // 构造函数\r\n  new a?.()\r\n  new a?.b()\r\n\r\n  // 链判断运算符的右侧有模板字符串\r\n  a?.`{b}`\r\n  a?.b`{c}`\r\n\r\n  // 链判断运算符的左侧是 super\r\n  super?.()\r\n  super?.foo\r\n\r\n  // 链运算符用于赋值运算符左侧\r\n  a?.b = c\r\n  （5）右侧不得为十进制数值\r\n\r\n  为了保证兼容以前的代码，\r\n  允许foo?.3:0被解析成foo ? .3 : 0，\r\n  因此规定如果?.后面紧跟一个十进制数字，\r\n  那么?.不再被看成是一个完整的运算符，\r\n  而会按照三元运算符进行处理，\r\n  也就是说，\r\n  那个小数点会归属于后面的十进制数字，\r\n  形成一个小数。\r\n\r\n  ## Null 判断运算符\r\n  读取对象属性的时候，\r\n  如果某个属性的值是null或undefined，\r\n  有时候需要为它们指定默认值。常见做法是通过||运算符指定默认值。\r\n\r\n  const headerText = response.settings.headerText || 'Hello, world!';\r\n  const animationDuration = response.settings.animationDuration || 300;\r\n  const showSplashScreen = response.settings.showSplashScreen || true;\r\n  上面的三行代码都通过||运算符指定默认值，\r\n  但是这样写是错的。开发者的原意是，\r\n  只要属性的值为null或undefined，\r\n  默认值就会生效，\r\n  但是属性的值如果为空字符串或false或0，\r\n  默认值也会生效。\r\n\r\n  为了避免这种情况，\r\n  ES2020 引入了一个新的 Null 判断运算符??。它的行为类似||，\r\n  但是只有运算符左侧的值为null或undefined时，\r\n  才会返回右侧的值。\r\n\r\n  const headerText = response.settings.headerText ?? 'Hello, world!';\r\n  const animationDuration = response.settings.animationDuration ?? 300;\r\n  const showSplashScreen = response.settings.showSplashScreen ?? true;\r\n  上面代码中，\r\n  默认值只有在属性值为null或undefined时，\r\n  才会生效。\r\n\r\n  这个运算符的一个目的，\r\n  就是跟链判断运算符?.配合使用，\r\n  为null或undefined的值设置默认值。\r\n\r\n  const animationDuration = response.settings?.animationDuration ?? 300;\r\n  上面代码中，\r\n  response.settings如果是null或undefined，\r\n  就会返回默认值300。\r\n\r\n  这个运算符很适合判断函数参数是否赋值。\r\n\r\n  function Component(props) {\r\n    const enable = props.enabled ?? true;\r\n    // …\r\n  }\r\n  上面代码判断props参数的enabled属性是否赋值，\r\n  等同于下面的写法。\r\n\r\n  function Component(props) {\r\n    const {\r\n      enabled: enable = true,\r\n    } = props;\r\n    // …\r\n  }\r\n  ??有一个运算优先级问题，\r\n  它与&&和||的优先级孰高孰低。现在的规则是，\r\n  如果多个逻辑运算符一起使用，\r\n  必须用括号表明优先级，\r\n  否则会报错。\r\n\r\n  // 报错\r\n  lhs && middle ?? rhs\r\n  lhs ?? middle && rhs\r\n  lhs || middle ?? rhs\r\n  lhs ?? middle || rhs\r\n  上面四个表达式都会报错，\r\n  必须加入表明优先级的括号。\r\n\r\n  (lhs && middle) ?? rhs;\r\n  lhs && (middle ?? rhs);\r\n\r\n  (lhs ?? middle) && rhs;\r\n  lhs ?? (middle && rhs);\r\n\r\n  (lhs || middle) ?? rhs;\r\n  lhs || (middle ?? rhs);\r\n\r\n  (lhs ?? middle) || rhs;\r\n  lhs ?? (middle || rhs);\r\n")]),e("pre",[r._v("\r\n对象的新增方法\r\n  ## Object.is()\r\n  ES5 比较两个值是否相等，\r\n  只有两个运算符：相等运算符（==）和严格相等运算符（===）。它们都有缺点，\r\n  前者会自动转换数据类型，\r\n  后者的NaN不等于自身，\r\n  以及+0等于-0。JavaScript 缺乏一种运算，\r\n  在所有环境中，\r\n  只要两个值是一样的，\r\n  它们就应该相等。\r\n\r\n  ES6 提出“Same-value equality”（同值相等）算法，\r\n  用来解决这个问题。Object.is就是部署这个算法的新方法。它用来比较两个值是否严格相等，\r\n  与严格比较运算符（===）的行为基本一致。\r\n\r\n  Object.is('foo', 'foo')\r\n  // true\r\n  Object.is({}, {})\r\n  // false\r\n  不同之处只有两个：一是+0不等于-0，\r\n  二是NaN等于自身。\r\n\r\n  +0 === -0 //true\r\n  NaN === NaN // false\r\n\r\n  Object.is(+0, -0) // false\r\n  Object.is(NaN, NaN) // true\r\n  ES5 可以通过下面的代码，\r\n  部署Object.is。\r\n\r\n  Object.defineProperty(Object, 'is', {\r\n    value: function(x, y) {\r\n      if (x === y) {\r\n        // 针对+0 不等于 -0的情况\r\n        return x !== 0 || 1 / x === 1 / y;\r\n      }\r\n      // 针对NaN的情况\r\n      return x !== x && y !== y;\r\n    },\r\n    configurable: true,\r\n    enumerable: false,\r\n    writable: true\r\n  });\r\n\r\n  ## Object.assign()\r\n  **1**\r\n  基本用法\r\n  Object.assign方法用于对象的合并，\r\n  将源对象（source）的所有可枚举属性，\r\n  复制到目标对象（target）。\r\n\r\n  const target = { a: 1 };\r\n\r\n  const source1 = { b: 2 };\r\n  const source2 = { c: 3 };\r\n\r\n  Object.assign(target, source1, source2);\r\n  target // {a:1, b:2, c:3}\r\n  Object.assign方法的第一个参数是目标对象，\r\n  后面的参数都是源对象。\r\n\r\n  注意，\r\n  如果目标对象与源对象有同名属性，\r\n  或多个源对象有同名属性，\r\n  则后面的属性会覆盖前面的属性。\r\n\r\n  const target = { a: 1, b: 1 };\r\n\r\n  const source1 = { b: 2, c: 2 };\r\n  const source2 = { c: 3 };\r\n\r\n  Object.assign(target, source1, source2);\r\n  target // {a:1, b:2, c:3}\r\n  如果只有一个参数，\r\n  Object.assign会直接返回该参数。\r\n\r\n  const obj = {a: 1};\r\n  Object.assign(obj) === obj // true\r\n  如果该参数不是对象，\r\n  则会先转成对象，\r\n  然后返回。\r\n\r\n  typeof Object.assign(2) // \"object\"\r\n  由于undefined和null无法转成对象，\r\n  所以如果它们作为参数，\r\n  就会报错。\r\n\r\n  Object.assign(undefined) // 报错\r\n  Object.assign(null) // 报错\r\n  如果非对象参数出现在源对象的位置（即非首参数），\r\n  那么处理规则有所不同。首先，\r\n  这些参数都会转成对象，\r\n  如果无法转成对象，\r\n  就会跳过。这意味着，\r\n  如果undefined和null不在首参数，\r\n  就不会报错。\r\n\r\n  let obj = {a: 1};\r\n  Object.assign(obj, undefined) === obj // true\r\n  Object.assign(obj, null) === obj // true\r\n  其他类型的值（即数值、字符串和布尔值）不在首参数，\r\n  也不会报错。但是，\r\n  除了字符串会以数组形式，\r\n  拷贝入目标对象，\r\n  其他值都不会产生效果。\r\n\r\n  const v1 = 'abc';\r\n  const v2 = true;\r\n  const v3 = 10;\r\n\r\n  const obj = Object.assign({}, v1, v2, v3);\r\n  console.log(obj); // { \"0\": \"a\", \"1\": \"b\", \"2\": \"c\" }\r\n  上面代码中，\r\n  v1、v2、v3分别是字符串、布尔值和数值，\r\n  结果只有字符串合入目标对象（以字符数组的形式），\r\n  数值和布尔值都会被忽略。这是因为只有字符串的包装对象，\r\n  会产生可枚举属性。\r\n\r\n  Object(true) // {[[PrimitiveValue]]: true}\r\n  Object(10)  //  {[[PrimitiveValue]]: 10}\r\n  Object('abc') // {0: \"a\", 1: \"b\", 2: \"c\", length: 3, [[PrimitiveValue]]: \"abc\"}\r\n  上面代码中，\r\n  布尔值、数值、字符串分别转成对应的包装对象，\r\n  可以看到它们的原始值都在包装对象的内部属性[[PrimitiveValue]]上面，\r\n  这个属性是不会被Object.assign拷贝的。只有字符串的包装对象，\r\n  会产生可枚举的实义属性，\r\n  那些属性则会被拷贝。\r\n\r\n  Object.assign拷贝的属性是有限制的，\r\n  只拷贝源对象的自身属性（不拷贝继承属性），\r\n  也不拷贝不可枚举的属性（enumerable: false）。\r\n\r\n  Object.assign({b: 'c'},\r\n    Object.defineProperty({}, 'invisible', {\r\n      enumerable: false,\r\n      value: 'hello'\r\n    })\r\n  )\r\n  // { b: 'c' }\r\n  上面代码中，\r\n  Object.assign要拷贝的对象只有一个不可枚举属性invisible，\r\n  这个属性并没有被拷贝进去。\r\n\r\n  属性名为 Symbol 值的属性，\r\n  也会被Object.assign拷贝。\r\n\r\n  Object.assign({ a: 'b' }, { [Symbol('c')]: 'd' })\r\n  // { a: 'b', Symbol(c): 'd' }\r\n\r\n  **2**\r\n  注意点\r\n  （1）浅拷贝\r\n\r\n  Object.assign方法实行的是浅拷贝，\r\n  而不是深拷贝。也就是说，\r\n  如果源对象某个属性的值是对象，\r\n  那么目标对象拷贝得到的是这个对象的引用。\r\n\r\n  const obj1 = {a: {b: 1}};\r\n  const obj2 = Object.assign({}, obj1);\r\n\r\n  obj1.a.b = 2;\r\n  obj2.a.b // 2\r\n  上面代码中，\r\n  源对象obj1的a属性的值是一个对象，\r\n  Object.assign拷贝得到的是这个对象的引用。这个对象的任何变化，\r\n  都会反映到目标对象上面。\r\n\r\n  （2）同名属性的替换\r\n\r\n  对于这种嵌套的对象，\r\n  一旦遇到同名属性，\r\n  Object.assign的处理方法是替换，\r\n  而不是添加。\r\n\r\n  const target = { a: { b: 'c', d: 'e' } }\r\n  const source = { a: { b: 'hello' } }\r\n  Object.assign(target, source)\r\n  // { a: { b: 'hello' } }\r\n  上面代码中，\r\n  target对象的a属性被source对象的a属性整个替换掉了，\r\n  而不会得到{ a: { b: 'hello', d: 'e' } }的结果。这通常不是开发者想要的，\r\n  需要特别小心。\r\n\r\n  一些函数库提供Object.assign的定制版本（比如 Lodash 的_.defaultsDeep方法），\r\n  可以得到深拷贝的合并。\r\n\r\n  （3）数组的处理\r\n\r\n  Object.assign可以用来处理数组，\r\n  但是会把数组视为对象。\r\n\r\n  Object.assign([1, 2, 3], [4, 5])\r\n  // [4, 5, 3]\r\n  上面代码中，\r\n  Object.assign把数组视为属性名为 0、1、2 的对象，\r\n  因此源数组的 0 号属性4覆盖了目标数组的 0 号属性1。\r\n\r\n  （4）取值函数的处理\r\n\r\n  Object.assign只能进行值的复制，\r\n  如果要复制的值是一个取值函数，\r\n  那么将求值后再复制。\r\n\r\n  const source = {\r\n    get foo() { return 1 }\r\n  };\r\n  const target = {};\r\n\r\n  Object.assign(target, source)\r\n  // { foo: 1 }\r\n  上面代码中，\r\n  source对象的foo属性是一个取值函数，\r\n  Object.assign不会复制这个取值函数，\r\n  只会拿到值以后，\r\n  将这个值复制过去。\r\n\r\n  **3**\r\n  常见用途\r\n  Object.assign方法有很多用处。\r\n\r\n  （1）为对象添加属性\r\n\r\n  class Point {\r\n    constructor(x, y) {\r\n      Object.assign(this, {x, y});\r\n    }\r\n  }\r\n  上面方法通过Object.assign方法，\r\n  将x属性和y属性添加到Point类的对象实例。\r\n\r\n  （2）为对象添加方法\r\n\r\n  Object.assign(SomeClass.prototype, {\r\n    someMethod(arg1, arg2) {\r\n      ···\r\n    },\r\n    anotherMethod() {\r\n      ···\r\n    }\r\n  });\r\n\r\n  // 等同于下面的写法\r\n  SomeClass.prototype.someMethod = function (arg1, arg2) {\r\n    ···\r\n  };\r\n  SomeClass.prototype.anotherMethod = function () {\r\n    ···\r\n  };\r\n  上面代码使用了对象属性的简洁表示法，\r\n  直接将两个函数放在大括号中，\r\n  再使用assign方法添加到SomeClass.prototype之中。\r\n\r\n  （3）克隆对象\r\n\r\n  function clone(origin) {\r\n    return Object.assign({}, origin);\r\n  }\r\n  上面代码将原始对象拷贝到一个空对象，\r\n  就得到了原始对象的克隆。\r\n\r\n  不过，\r\n  采用这种方法克隆，\r\n  只能克隆原始对象自身的值，\r\n  不能克隆它继承的值。如果想要保持继承链，\r\n  可以采用下面的代码。\r\n\r\n  function clone(origin) {\r\n    let originProto = Object.getPrototypeOf(origin);\r\n    return Object.assign(Object.create(originProto), origin);\r\n  }\r\n  （4）合并多个对象\r\n\r\n  将多个对象合并到某个对象。\r\n\r\n  const merge =\r\n    (target, ...sources) => Object.assign(target, ...sources);\r\n  如果希望合并后返回一个新对象，\r\n  可以改写上面函数，\r\n  对一个空对象合并。\r\n\r\n  const merge =\r\n    (...sources) => Object.assign({}, ...sources);\r\n  （5）为属性指定默认值\r\n\r\n  const DEFAULTS = {\r\n    logLevel: 0,\r\n    outputFormat: 'html'\r\n  };\r\n\r\n  function processContent(options) {\r\n    options = Object.assign({}, DEFAULTS, options);\r\n    console.log(options);\r\n    // ...\r\n  }\r\n  上面代码中，\r\n  DEFAULTS对象是默认值，\r\n  options对象是用户提供的参数。Object.assign方法将DEFAULTS和options合并成一个新对象，\r\n  如果两者有同名属性，\r\n  则options的属性值会覆盖DEFAULTS的属性值。\r\n\r\n  注意，\r\n  由于存在浅拷贝的问题，\r\n  DEFAULTS对象和options对象的所有属性的值，\r\n  最好都是简单类型，\r\n  不要指向另一个对象。否则，\r\n  DEFAULTS对象的该属性很可能不起作用。\r\n\r\n  const DEFAULTS = {\r\n    url: {\r\n      host: 'example.com',\r\n      port: 7070\r\n    },\r\n  };\r\n\r\n  processContent({ url: {port: 8000} })\r\n  // {\r\n  //   url: {port: 8000}\r\n  // }\r\n  上面代码的原意是将url.port改成 8000，\r\n  url.host不变。实际结果却是options.url覆盖掉DEFAULTS.url，\r\n  所以url.host就不存在了。\r\n\r\n  ## Object.getOwnPropertyDescriptors()\r\n  ES5 的Object.getOwnPropertyDescriptor()方法会返回某个对象属性的描述对象（descriptor）。ES2017 引入了Object.getOwnPropertyDescriptors()方法，\r\n  返回指定对象所有自身属性（非继承属性）的描述对象。\r\n\r\n  const obj = {\r\n    foo: 123,\r\n    get bar() { return 'abc' }\r\n  };\r\n\r\n  Object.getOwnPropertyDescriptors(obj)\r\n  // { foo:\r\n  //    { value: 123,\r\n  //      writable: true,\r\n  //      enumerable: true,\r\n  //      configurable: true },\r\n  //   bar:\r\n  //    { get: [Function: get bar],\r\n  //      set: undefined,\r\n  //      enumerable: true,\r\n  //      configurable: true } }\r\n  上面代码中，\r\n  Object.getOwnPropertyDescriptors()方法返回一个对象，\r\n  所有原对象的属性名都是该对象的属性名，\r\n  对应的属性值就是该属性的描述对象。\r\n\r\n  该方法的实现非常容易。\r\n\r\n  function getOwnPropertyDescriptors(obj) {\r\n    const result = {};\r\n    for (let key of Reflect.ownKeys(obj)) {\r\n      result[key] = Object.getOwnPropertyDescriptor(obj, key);\r\n    }\r\n    return result;\r\n  }\r\n  该方法的引入目的，\r\n  主要是为了解决Object.assign()无法正确拷贝get属性和set属性的问题。\r\n\r\n  const source = {\r\n    set foo(value) {\r\n      console.log(value);\r\n    }\r\n  };\r\n\r\n  const target1 = {};\r\n  Object.assign(target1, source);\r\n\r\n  Object.getOwnPropertyDescriptor(target1, 'foo')\r\n  // { value: undefined,\r\n  //   writable: true,\r\n  //   enumerable: true,\r\n  //   configurable: true }\r\n  上面代码中，\r\n  source对象的foo属性的值是一个赋值函数，\r\n  Object.assign方法将这个属性拷贝给target1对象，\r\n  结果该属性的值变成了undefined。这是因为Object.assign方法总是拷贝一个属性的值，\r\n  而不会拷贝它背后的赋值方法或取值方法。\r\n\r\n  这时，\r\n  Object.getOwnPropertyDescriptors()方法配合Object.defineProperties()方法，\r\n  就可以实现正确拷贝。\r\n\r\n  const source = {\r\n    set foo(value) {\r\n      console.log(value);\r\n    }\r\n  };\r\n\r\n  const target2 = {};\r\n  Object.defineProperties(target2, Object.getOwnPropertyDescriptors(source));\r\n  Object.getOwnPropertyDescriptor(target2, 'foo')\r\n  // { get: undefined,\r\n  //   set: [Function: set foo],\r\n  //   enumerable: true,\r\n  //   configurable: true }\r\n  上面代码中，\r\n  两个对象合并的逻辑可以写成一个函数。\r\n\r\n  const shallowMerge = (target, source) => Object.defineProperties(\r\n    target,\r\n    Object.getOwnPropertyDescriptors(source)\r\n  );\r\n  Object.getOwnPropertyDescriptors()方法的另一个用处，\r\n  是配合Object.create()方法，\r\n  将对象属性克隆到一个新对象。这属于浅拷贝。\r\n\r\n  const clone = Object.create(Object.getPrototypeOf(obj),\r\n    Object.getOwnPropertyDescriptors(obj));\r\n\r\n  // 或者\r\n\r\n  const shallowClone = (obj) => Object.create(\r\n    Object.getPrototypeOf(obj),\r\n    Object.getOwnPropertyDescriptors(obj)\r\n  );\r\n  上面代码会克隆对象obj。\r\n\r\n  另外，\r\n  Object.getOwnPropertyDescriptors()方法可以实现一个对象继承另一个对象。以前，\r\n  继承另一个对象，\r\n  常常写成下面这样。\r\n\r\n  const obj = {\r\n    __proto__: prot,\r\n    foo: 123,\r\n  };\r\n  ES6 规定__proto__只有浏览器要部署，\r\n  其他环境不用部署。如果去除__proto__，\r\n  上面代码就要改成下面这样。\r\n\r\n  const obj = Object.create(prot);\r\n  obj.foo = 123;\r\n\r\n  // 或者\r\n\r\n  const obj = Object.assign(\r\n    Object.create(prot),\r\n    {\r\n      foo: 123,\r\n    }\r\n  );\r\n  有了Object.getOwnPropertyDescriptors()，\r\n  我们就有了另一种写法。\r\n\r\n  const obj = Object.create(\r\n    prot,\r\n    Object.getOwnPropertyDescriptors({\r\n      foo: 123,\r\n    })\r\n  );\r\n  Object.getOwnPropertyDescriptors()也可以用来实现 Mixin（混入）模式。\r\n\r\n  let mix = (object) => ({\r\n    with: (...mixins) => mixins.reduce(\r\n      (c, mixin) => Object.create(\r\n        c, Object.getOwnPropertyDescriptors(mixin)\r\n      ), object)\r\n  });\r\n\r\n  // multiple mixins example\r\n  let a = {a: 'a'};\r\n  let b = {b: 'b'};\r\n  let c = {c: 'c'};\r\n  let d = mix(c).with(a, b);\r\n\r\n  d.c // \"c\"\r\n  d.b // \"b\"\r\n  d.a // \"a\"\r\n  上面代码返回一个新的对象d，\r\n  代表了对象a和b被混入了对象c的操作。\r\n\r\n  出于完整性的考虑，\r\n  Object.getOwnPropertyDescriptors()进入标准以后，\r\n  以后还会新增Reflect.getOwnPropertyDescriptors()方法。\r\n\r\n  ## __proto__属性，Object.setPrototypeOf()，Object.getPrototypeOf()\r\n  JavaScript 语言的对象继承是通过原型链实现的。ES6 提供了更多原型对象的操作方法。\r\n\r\n  **1**\r\n  __proto__属性\r\n  __proto__属性（前后各两个下划线），\r\n  用来读取或设置当前对象的原型对象（prototype）。目前，\r\n  所有浏览器（包括 IE11）都部署了这个属性。\r\n\r\n  // es5 的写法\r\n  const obj = {\r\n    method: function() { ... }\r\n  };\r\n  obj.__proto__ = someOtherObj;\r\n\r\n  // es6 的写法\r\n  var obj = Object.create(someOtherObj);\r\n  obj.method = function() { ... };\r\n  该属性没有写入 ES6 的正文，\r\n  而是写入了附录，\r\n  原因是__proto__前后的双下划线，\r\n  说明它本质上是一个内部属性，\r\n  而不是一个正式的对外的 API，\r\n  只是由于浏览器广泛支持，\r\n  才被加入了 ES6。标准明确规定，\r\n  只有浏览器必须部署这个属性，\r\n  其他运行环境不一定需要部署，\r\n  而且新的代码最好认为这个属性是不存在的。因此，\r\n  无论从语义的角度，\r\n  还是从兼容性的角度，\r\n  都不要使用这个属性，\r\n  而是使用下面的Object.setPrototypeOf()（写操作）、Object.getPrototypeOf()（读操作）、Object.create()（生成操作）代替。\r\n\r\n  实现上，\r\n  __proto__调用的是Object.prototype.__proto__，\r\n  具体实现如下。\r\n\r\n  Object.defineProperty(Object.prototype, '__proto__', {\r\n    get() {\r\n      let _thisObj = Object(this);\r\n      return Object.getPrototypeOf(_thisObj);\r\n    },\r\n    set(proto) {\r\n      if (this === undefined || this === null) {\r\n        throw new TypeError();\r\n      }\r\n      if (!isObject(this)) {\r\n        return undefined;\r\n      }\r\n      if (!isObject(proto)) {\r\n        return undefined;\r\n      }\r\n      let status = Reflect.setPrototypeOf(this, proto);\r\n      if (!status) {\r\n        throw new TypeError();\r\n      }\r\n    },\r\n  });\r\n\r\n  function isObject(value) {\r\n    return Object(value) === value;\r\n  }\r\n  如果一个对象本身部署了__proto__属性，\r\n  该属性的值就是对象的原型。\r\n\r\n  Object.getPrototypeOf({ __proto__: null })\r\n  // null\r\n\r\n  **2**\r\n  Object.setPrototypeOf()\r\n  Object.setPrototypeOf方法的作用与__proto__相同，\r\n  用来设置一个对象的原型对象（prototype），\r\n  返回参数对象本身。它是 ES6 正式推荐的设置原型对象的方法。\r\n\r\n  // 格式\r\n  Object.setPrototypeOf(object, prototype)\r\n\r\n  // 用法\r\n  const o = Object.setPrototypeOf({}, null);\r\n  该方法等同于下面的函数。\r\n\r\n  function setPrototypeOf(obj, proto) {\r\n    obj.__proto__ = proto;\r\n    return obj;\r\n  }\r\n  下面是一个例子。\r\n\r\n  let proto = {};\r\n  let obj = { x: 10 };\r\n  Object.setPrototypeOf(obj, proto);\r\n\r\n  proto.y = 20;\r\n  proto.z = 40;\r\n\r\n  obj.x // 10\r\n  obj.y // 20\r\n  obj.z // 40\r\n  上面代码将proto对象设为obj对象的原型，\r\n  所以从obj对象可以读取proto对象的属性。\r\n\r\n  如果第一个参数不是对象，\r\n  会自动转为对象。但是由于返回的还是第一个参数，\r\n  所以这个操作不会产生任何效果。\r\n\r\n  Object.setPrototypeOf(1, {}) === 1 // true\r\n  Object.setPrototypeOf('foo', {}) === 'foo' // true\r\n  Object.setPrototypeOf(true, {}) === true // true\r\n  由于undefined和null无法转为对象，\r\n  所以如果第一个参数是undefined或null，\r\n  就会报错。\r\n\r\n  Object.setPrototypeOf(undefined, {})\r\n  // TypeError: Object.setPrototypeOf called on null or undefined\r\n\r\n  Object.setPrototypeOf(null, {})\r\n  // TypeError: Object.setPrototypeOf called on null or undefined\r\n  Object.getPrototypeOf()\r\n\r\n  **3**\r\n  该方法与Object.setPrototypeOf方法配套，\r\n  用于读取一个对象的原型对象。\r\n\r\n  Object.getPrototypeOf(obj);\r\n  下面是一个例子。\r\n\r\n  function Rectangle() {\r\n    // ...\r\n  }\r\n\r\n  const rec = new Rectangle();\r\n\r\n  Object.getPrototypeOf(rec) === Rectangle.prototype\r\n  // true\r\n\r\n  Object.setPrototypeOf(rec, Object.prototype);\r\n  Object.getPrototypeOf(rec) === Rectangle.prototype\r\n  // false\r\n  如果参数不是对象，\r\n  会被自动转为对象。\r\n\r\n  // 等同于 Object.getPrototypeOf(Number(1))\r\n  Object.getPrototypeOf(1)\r\n  // Number {[[PrimitiveValue]]: 0}\r\n\r\n  // 等同于 Object.getPrototypeOf(String('foo'))\r\n  Object.getPrototypeOf('foo')\r\n  // String {length: 0, [[PrimitiveValue]]: \"\"}\r\n\r\n  // 等同于 Object.getPrototypeOf(Boolean(true))\r\n  Object.getPrototypeOf(true)\r\n  // Boolean {[[PrimitiveValue]]: false}\r\n\r\n  Object.getPrototypeOf(1) === Number.prototype // true\r\n  Object.getPrototypeOf('foo') === String.prototype // true\r\n  Object.getPrototypeOf(true) === Boolean.prototype // true\r\n  如果参数是undefined或null，\r\n  它们无法转为对象，\r\n  所以会报错。\r\n\r\n  Object.getPrototypeOf(null)\r\n  // TypeError: Cannot convert undefined or null to object\r\n\r\n  Object.getPrototypeOf(undefined)\r\n  // TypeError: Cannot convert undefined or null to object\r\n\r\n  ## Object.keys()，Object.values()，Object.entries()\r\n  **1**\r\n  Object.keys()\r\n  ES5 引入了Object.keys方法，\r\n  返回一个数组，\r\n  成员是参数对象自身的（不含继承的）所有可遍历（enumerable）属性的键名。\r\n\r\n  var obj = { foo: 'bar', baz: 42 };\r\n  Object.keys(obj)\r\n  // [\"foo\", \"baz\"]\r\n  ES2017 引入了跟Object.keys配套的Object.values和Object.entries，\r\n  作为遍历一个对象的补充手段，\r\n  供for...of循环使用。\r\n\r\n  let {keys, values, entries} = Object;\r\n  let obj = { a: 1, b: 2, c: 3 };\r\n\r\n  for (let key of keys(obj)) {\r\n    console.log(key); // 'a', 'b', 'c'\r\n  }\r\n\r\n  for (let value of values(obj)) {\r\n    console.log(value); // 1, 2, 3\r\n  }\r\n\r\n  for (let [key, value] of entries(obj)) {\r\n    console.log([key, value]); // ['a', 1], ['b', 2], ['c', 3]\r\n  }\r\n\r\n  **2**\r\n  Object.values()\r\n  Object.values方法返回一个数组，\r\n  成员是参数对象自身的（不含继承的）所有可遍历（enumerable）属性的键值。\r\n\r\n  const obj = { foo: 'bar', baz: 42 };\r\n  Object.values(obj)\r\n  // [\"bar\", 42]\r\n  返回数组的成员顺序，\r\n  与本章的《属性的遍历》部分介绍的排列规则一致。\r\n\r\n  const obj = { 100: 'a', 2: 'b', 7: 'c' };\r\n  Object.values(obj)\r\n  // [\"b\", \"c\", \"a\"]\r\n  上面代码中，\r\n  属性名为数值的属性，\r\n  是按照数值大小，\r\n  从小到大遍历的，\r\n  因此返回的顺序是b、c、a。\r\n\r\n  Object.values只返回对象自身的可遍历属性。\r\n\r\n  const obj = Object.create({}, {p: {value: 42}});\r\n  Object.values(obj) // []\r\n  上面代码中，\r\n  Object.create方法的第二个参数添加的对象属性（属性p），\r\n  如果不显式声明，\r\n  默认是不可遍历的，\r\n  因为p的属性描述对象的enumerable默认是false，\r\n  Object.values不会返回这个属性。只要把enumerable改成true，\r\n  Object.values就会返回属性p的值。\r\n\r\n  const obj = Object.create({}, {p:\r\n    {\r\n      value: 42,\r\n      enumerable: true\r\n    }\r\n  });\r\n  Object.values(obj) // [42]\r\n  Object.values会过滤属性名为 Symbol 值的属性。\r\n\r\n  Object.values({ [Symbol()]: 123, foo: 'abc' });\r\n  // ['abc']\r\n  如果Object.values方法的参数是一个字符串，\r\n  会返回各个字符组成的一个数组。\r\n\r\n  Object.values('foo')\r\n  // ['f', 'o', 'o']\r\n  上面代码中，\r\n  字符串会先转成一个类似数组的对象。字符串的每个字符，\r\n  就是该对象的一个属性。因此，\r\n  Object.values返回每个属性的键值，\r\n  就是各个字符组成的一个数组。\r\n\r\n  如果参数不是对象，\r\n  Object.values会先将其转为对象。由于数值和布尔值的包装对象，\r\n  都不会为实例添加非继承的属性。所以，\r\n  Object.values会返回空数组。\r\n\r\n  Object.values(42) // []\r\n  Object.values(true) // []\r\n\r\n  **3**\r\n  Object.entries()\r\n  Object.entries()方法返回一个数组，\r\n  成员是参数对象自身的（不含继承的）所有可遍历（enumerable）属性的键值对数组。\r\n\r\n  const obj = { foo: 'bar', baz: 42 };\r\n  Object.entries(obj)\r\n  // [ [\"foo\", \"bar\"], [\"baz\", 42] ]\r\n  除了返回值不一样，\r\n  该方法的行为与Object.values基本一致。\r\n\r\n  如果原对象的属性名是一个 Symbol 值，\r\n  该属性会被忽略。\r\n\r\n  Object.entries({ [Symbol()]: 123, foo: 'abc' });\r\n  // [ [ 'foo', 'abc' ] ]\r\n  上面代码中，\r\n  原对象有两个属性，\r\n  Object.entries只输出属性名非 Symbol 值的属性。将来可能会有Reflect.ownEntries()方法，\r\n  返回对象自身的所有属性。\r\n\r\n  Object.entries的基本用途是遍历对象的属性。\r\n\r\n  let obj = { one: 1, two: 2 };\r\n  for (let [k, v] of Object.entries(obj)) {\r\n    console.log(\r\n      `${JSON.stringify(k)}: ${JSON.stringify(v)}`\r\n    );\r\n  }\r\n  // \"one\": 1\r\n  // \"two\": 2\r\n  Object.entries方法的另一个用处是，\r\n  将对象转为真正的Map结构。\r\n\r\n  const obj = { foo: 'bar', baz: 42 };\r\n  const map = new Map(Object.entries(obj));\r\n  map // Map { foo: \"bar\", baz: 42 }\r\n  自己实现Object.entries方法，\r\n  非常简单。\r\n\r\n  // Generator函数的版本\r\n  function* entries(obj) {\r\n    for (let key of Object.keys(obj)) {\r\n      yield [key, obj[key]];\r\n    }\r\n  }\r\n\r\n  // 非Generator函数的版本\r\n  function entries(obj) {\r\n    let arr = [];\r\n    for (let key of Object.keys(obj)) {\r\n      arr.push([key, obj[key]]);\r\n    }\r\n    return arr;\r\n  }\r\n\r\n  ## Object.fromEntries()\r\n  Object.fromEntries()方法是Object.entries()的逆操作，\r\n  用于将一个键值对数组转为对象。\r\n\r\n  Object.fromEntries([\r\n    ['foo', 'bar'],\r\n    ['baz', 42]\r\n  ])\r\n  // { foo: \"bar\", baz: 42 }\r\n  该方法的主要目的，\r\n  是将键值对的数据结构还原为对象，\r\n  因此特别适合将 Map 结构转为对象。\r\n\r\n  // 例一\r\n  const entries = new Map([\r\n    ['foo', 'bar'],\r\n    ['baz', 42]\r\n  ]);\r\n\r\n  Object.fromEntries(entries)\r\n  // { foo: \"bar\", baz: 42 }\r\n\r\n  // 例二\r\n  const map = new Map().set('foo', true).set('bar', false);\r\n  Object.fromEntries(map)\r\n  // { foo: true, bar: false }\r\n  该方法的一个用处是配合URLSearchParams对象，\r\n  将查询字符串转为对象。\r\n\r\n  Object.fromEntries(new URLSearchParams('foo=bar&baz=qux'))\r\n  // { foo: \"bar\", baz: \"qux\" }\r\n")])])}],a={},s=a,i=e("2877"),c=Object(i["a"])(s,t,o,!1,null,null,null);n["default"]=c.exports}}]);
//# sourceMappingURL=chunk-2d2219f8.171ee48f.js.map